bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000   1) /* ---- SYMMETRIC KEY STUFF -----
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000   2)  *
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200   3)  * We put each of the ciphers scheduled keys in their own structs then we put all of
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000   4)  * the key formats in one union.  This makes the function prototypes easier to use.
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000   5)  */
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000   6) #ifdef LTC_BLOWFISH
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000   7) struct blowfish_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000   8)    ulong32 S[4][256];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000   9)    ulong32 K[18];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  10) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  11) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  12) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  13) #ifdef LTC_RC5
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  14) struct rc5_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  15)    int rounds;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  16)    ulong32 K[50];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  17) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  18) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  19) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  20) #ifdef LTC_RC6
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  21) struct rc6_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  22)    ulong32 K[44];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  23) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  24) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  25) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  26) #ifdef LTC_SAFERP
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  27) struct saferp_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  28)    unsigned char K[33][16];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  29)    long rounds;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  30) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  31) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  32) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  33) #ifdef LTC_RIJNDAEL
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  34) struct rijndael_key {
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000  35)    ulong32 eK[60], dK[60];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  36)    int Nr;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  37) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  38) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  39) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  40) #ifdef LTC_KSEED
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  41) struct kseed_key {
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  42)     ulong32 K[32], dK[32];
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  43) };
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  44) #endif
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  45) 
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  46) #ifdef LTC_KASUMI
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  47) struct kasumi_key {
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  48)     ulong32 KLi1[8], KLi2[8],
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  49)             KOi1[8], KOi2[8], KOi3[8],
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  50)             KIi1[8], KIi2[8], KIi3[8];
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  51) };
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  52) #endif
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000  53) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  54) #ifdef LTC_XTEA
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  55) struct xtea_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  56)    unsigned long A[32], B[32];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  57) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  58) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  59) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  60) #ifdef LTC_TWOFISH
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  61) #ifndef LTC_TWOFISH_SMALL
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  62)    struct twofish_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  63)       ulong32 S[4][256], K[40];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  64)    };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  65) #else
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  66)    struct twofish_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  67)       ulong32 K[40];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  68)       unsigned char S[32], start;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  69)    };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  70) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  71) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  72) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  73) #ifdef LTC_SAFER
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  74) #define LTC_SAFER_K64_DEFAULT_NOF_ROUNDS     6
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  75) #define LTC_SAFER_K128_DEFAULT_NOF_ROUNDS   10
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  76) #define LTC_SAFER_SK64_DEFAULT_NOF_ROUNDS    8
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  77) #define LTC_SAFER_SK128_DEFAULT_NOF_ROUNDS  10
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  78) #define LTC_SAFER_MAX_NOF_ROUNDS            13
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  79) #define LTC_SAFER_BLOCK_LEN                  8
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  80) #define LTC_SAFER_KEY_LEN     (1 + LTC_SAFER_BLOCK_LEN * (1 + 2 * LTC_SAFER_MAX_NOF_ROUNDS))
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  81) typedef unsigned char safer_block_t[LTC_SAFER_BLOCK_LEN];
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  82) typedef unsigned char safer_key_t[LTC_SAFER_KEY_LEN];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  83) struct safer_key { safer_key_t key; };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  84) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  85) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  86) #ifdef LTC_RC2
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  87) struct rc2_key { unsigned xkey[64]; };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  88) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  89) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  90) #ifdef LTC_DES
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  91) struct des_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  92)     ulong32 ek[32], dk[32];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  93) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  94) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  95) struct des3_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  96)     ulong32 ek[3][32], dk[3][32];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  97) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  98) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000  99) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 100) #ifdef LTC_CAST5
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 101) struct cast5_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 102)     ulong32 K[32], keylen;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 103) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 104) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 105) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 106) #ifdef LTC_NOEKEON
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 107) struct noekeon_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 108)     ulong32 K[4], dK[4];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 109) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 110) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 111) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 112) #ifdef LTC_SKIPJACK
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 113) struct skipjack_key {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 114)     unsigned char key[10];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 115) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 116) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 117) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 118) #ifdef LTC_KHAZAD
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 119) struct khazad_key {
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 120)    ulong64 roundKeyEnc[8 + 1];
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 121)    ulong64 roundKeyDec[8 + 1];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 122) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 123) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 124) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 125) #ifdef LTC_ANUBIS
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 126) struct anubis_key {
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 127)    int keyBits;
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 128)    int R;
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 129)    ulong32 roundKeyEnc[18 + 1][4];
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 130)    ulong32 roundKeyDec[18 + 1][4];
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 131) };
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 132) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 133) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 134) #ifdef LTC_MULTI2
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 135) struct multi2_key {
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 136)     int N;
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 137)     ulong32 uk[8];
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 138) };
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 139) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 140) 
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 141) #ifdef LTC_CAMELLIA
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 142) struct camellia_key {
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 143)     int R;
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 144)     ulong64 kw[4], k[24], kl[6];
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 145) };
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 146) #endif
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 147) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 148) typedef union Symmetric_key {
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 149) #ifdef LTC_DES
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 150)    struct des_key des;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 151)    struct des3_key des3;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 152) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 153) #ifdef LTC_RC2
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 154)    struct rc2_key rc2;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 155) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 156) #ifdef LTC_SAFER
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 157)    struct safer_key safer;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 158) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 159) #ifdef LTC_TWOFISH
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 160)    struct twofish_key  twofish;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 161) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 162) #ifdef LTC_BLOWFISH
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 163)    struct blowfish_key blowfish;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 164) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 165) #ifdef LTC_RC5
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 166)    struct rc5_key      rc5;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 167) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 168) #ifdef LTC_RC6
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 169)    struct rc6_key      rc6;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 170) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 171) #ifdef LTC_SAFERP
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 172)    struct saferp_key   saferp;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 173) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 174) #ifdef LTC_RIJNDAEL
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 175)    struct rijndael_key rijndael;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 176) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 177) #ifdef LTC_XTEA
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 178)    struct xtea_key     xtea;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 179) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 180) #ifdef LTC_CAST5
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 181)    struct cast5_key    cast5;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 182) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 183) #ifdef LTC_NOEKEON
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 184)    struct noekeon_key  noekeon;
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 185) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 186) #ifdef LTC_SKIPJACK
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 187)    struct skipjack_key skipjack;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 188) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 189) #ifdef LTC_KHAZAD
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 190)    struct khazad_key   khazad;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 191) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 192) #ifdef LTC_ANUBIS
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 193)    struct anubis_key   anubis;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 194) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 195) #ifdef LTC_KSEED
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 196)    struct kseed_key    kseed;
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 197) #endif
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 198) #ifdef LTC_KASUMI
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 199)    struct kasumi_key   kasumi;
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 200) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 201) #ifdef LTC_MULTI2
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 202)    struct multi2_key   multi2;
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 203) #endif
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 204) #ifdef LTC_CAMELLIA
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 205)    struct camellia_key camellia;
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 206) #endif
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 207)    void   *data;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 208) } symmetric_key;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 209) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 210) #ifdef LTC_ECB_MODE
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 211) /** A block cipher ECB structure */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 212) typedef struct {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 213)    /** The index of the cipher chosen */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 214)    int                 cipher,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 215)    /** The block size of the given cipher */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 216)                        blocklen;
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 217)    /** The scheduled key */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 218)    symmetric_key       key;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 219) } symmetric_ECB;
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 220) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 221) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 222) #ifdef LTC_CFB_MODE
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 223) /** A block cipher CFB structure */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 224) typedef struct {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 225)    /** The index of the cipher chosen */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 226)    int                 cipher,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 227)    /** The block size of the given cipher */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 228)                        blocklen,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 229)    /** The padding offset */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 230)                        padlen;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 231)    /** The current IV */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 232)    unsigned char       IV[MAXBLOCKSIZE],
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 233)    /** The pad used to encrypt/decrypt */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 234)                        pad[MAXBLOCKSIZE];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 235)    /** The scheduled key */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 236)    symmetric_key       key;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 237) } symmetric_CFB;
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 238) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 239) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 240) #ifdef LTC_OFB_MODE
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 241) /** A block cipher OFB structure */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 242) typedef struct {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 243)    /** The index of the cipher chosen */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 244)    int                 cipher,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 245)    /** The block size of the given cipher */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 246)                        blocklen,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 247)    /** The padding offset */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 248)                        padlen;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 249)    /** The current IV */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 250)    unsigned char       IV[MAXBLOCKSIZE];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 251)    /** The scheduled key */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 252)    symmetric_key       key;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 253) } symmetric_OFB;
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 254) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 255) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 256) #ifdef LTC_CBC_MODE
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 257) /** A block cipher CBC structure */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 258) typedef struct {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 259)    /** The index of the cipher chosen */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 260)    int                 cipher,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 261)    /** The block size of the given cipher */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 262)                        blocklen;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 263)    /** The current IV */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 264)    unsigned char       IV[MAXBLOCKSIZE];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 265)    /** The scheduled key */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 266)    symmetric_key       key;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 267) } symmetric_CBC;
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 268) #endif
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 269) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 270) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 271) #ifdef LTC_CTR_MODE
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 272) /** A block cipher CTR structure */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 273) typedef struct {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 274)    /** The index of the cipher chosen */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 275)    int                 cipher,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 276)    /** The block size of the given cipher */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 277)                        blocklen,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 278)    /** The padding offset */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 279)                        padlen,
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 280)    /** The mode (endianess) of the CTR, 0==little, 1==big */
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 281)                        mode,
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 282)    /** counter width */
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 283)                        ctrlen;
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 284) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 285)    /** The counter */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 286)    unsigned char       ctr[MAXBLOCKSIZE],
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 287)    /** The pad used to encrypt/decrypt */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 288)                        pad[MAXBLOCKSIZE];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 289)    /** The scheduled key */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 290)    symmetric_key       key;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 291) } symmetric_CTR;
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 292) #endif
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 293) 
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 294) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 295) #ifdef LTC_LRW_MODE
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 296) /** A LRW structure */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 297) typedef struct {
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 298)     /** The index of the cipher chosen (must be a 128-bit block cipher) */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 299)     int               cipher;
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 300) 
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 301)     /** The current IV */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 302)     unsigned char     IV[16],
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 303) 
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 304)     /** the tweak key */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 305)                       tweak[16],
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 306) 
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 307)     /** The current pad, it's the product of the first 15 bytes against the tweak key */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 308)                       pad[16];
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 309) 
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 310)     /** The scheduled symmetric key */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 311)     symmetric_key     key;
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 312) 
155a54ba (Steffen Jaeckel 2014-07-17 10:49:05 +0200 313) #ifdef LTC_LRW_TABLES
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 314)     /** The pre-computed multiplication table */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 315)     unsigned char     PC[16][256][16];
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 316) #endif
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 317) } symmetric_LRW;
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 318) #endif
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 319) 
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 320) #ifdef LTC_F8_MODE
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 321) /** A block cipher F8 structure */
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 322) typedef struct {
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 323)    /** The index of the cipher chosen */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 324)    int                 cipher,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 325)    /** The block size of the given cipher */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 326)                        blocklen,
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 327)    /** The padding offset */
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 328)                        padlen;
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 329)    /** The current IV */
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 330)    unsigned char       IV[MAXBLOCKSIZE],
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 331)                        MIV[MAXBLOCKSIZE];
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 332)    /** Current block count */
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 333)    ulong32             blockcnt;
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 334)    /** The scheduled key */
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 335)    symmetric_key       key;
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 336) } symmetric_F8;
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 337) #endif
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 338) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 339) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 340) /** cipher descriptor table, last entry has "name == NULL" to mark the end of table */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 341) extern struct ltc_cipher_descriptor {
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 342)    /** name of cipher */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 343)    char *name;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 344)    /** internal ID */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 345)    unsigned char ID;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 346)    /** min keysize (octets) */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 347)    int  min_key_length,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 348)    /** max keysize (octets) */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 349)         max_key_length,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 350)    /** block size (octets) */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 351)         block_length,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 352)    /** default number of rounds */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 353)         default_rounds;
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 354)    /** Setup the cipher
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 355)       @param key         The input symmetric key
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 356)       @param keylen      The length of the input key (octets)
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 357)       @param num_rounds  The requested number of rounds (0==default)
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 358)       @param skey        [out] The destination of the scheduled key
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 359)       @return CRYPT_OK if successful
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 360)    */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 361)    int  (*setup)(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 362)    /** Encrypt a block
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 363)       @param pt      The plaintext
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 364)       @param ct      [out] The ciphertext
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 365)       @param skey    The scheduled key
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 366)       @return CRYPT_OK if successful
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 367)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 368)    int (*ecb_encrypt)(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 369)    /** Decrypt a block
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 370)       @param ct      The ciphertext
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 371)       @param pt      [out] The plaintext
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 372)       @param skey    The scheduled key
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 373)       @return CRYPT_OK if successful
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 374)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 375)    int (*ecb_decrypt)(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 376)    /** Test the block cipher
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 377)        @return CRYPT_OK if successful, CRYPT_NOP if self-testing has been disabled
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 378)    */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 379)    int (*test)(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 380) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 381)    /** Terminate the context
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 382)       @param skey    The scheduled key
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 383)    */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 384)    void (*done)(symmetric_key *skey);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 385) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 386)    /** Determine a key size
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 387)        @param keysize    [in/out] The size of the key desired and the suggested size
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 388)        @return CRYPT_OK if successful
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 389)    */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 390)    int  (*keysize)(int *keysize);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 391) 
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 392) /** Accelerators **/
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 393)    /** Accelerated ECB encryption
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 394)        @param pt      Plaintext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 395)        @param ct      Ciphertext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 396)        @param blocks  The number of complete blocks to process
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 397)        @param skey    The scheduled key context
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 398)        @return CRYPT_OK if successful
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 399)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 400)    int (*accel_ecb_encrypt)(const unsigned char *pt, unsigned char *ct, unsigned long blocks, symmetric_key *skey);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 401) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 402)    /** Accelerated ECB decryption
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 403)        @param pt      Plaintext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 404)        @param ct      Ciphertext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 405)        @param blocks  The number of complete blocks to process
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 406)        @param skey    The scheduled key context
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 407)        @return CRYPT_OK if successful
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 408)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 409)    int (*accel_ecb_decrypt)(const unsigned char *ct, unsigned char *pt, unsigned long blocks, symmetric_key *skey);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 410) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 411)    /** Accelerated CBC encryption
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 412)        @param pt      Plaintext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 413)        @param ct      Ciphertext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 414)        @param blocks  The number of complete blocks to process
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 415)        @param IV      The initial value (input/output)
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 416)        @param skey    The scheduled key context
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 417)        @return CRYPT_OK if successful
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 418)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 419)    int (*accel_cbc_encrypt)(const unsigned char *pt, unsigned char *ct, unsigned long blocks, unsigned char *IV, symmetric_key *skey);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 420) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 421)    /** Accelerated CBC decryption
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 422)        @param pt      Plaintext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 423)        @param ct      Ciphertext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 424)        @param blocks  The number of complete blocks to process
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 425)        @param IV      The initial value (input/output)
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 426)        @param skey    The scheduled key context
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 427)        @return CRYPT_OK if successful
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 428)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 429)    int (*accel_cbc_decrypt)(const unsigned char *ct, unsigned char *pt, unsigned long blocks, unsigned char *IV, symmetric_key *skey);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 430) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 431)    /** Accelerated CTR encryption
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 432)        @param pt      Plaintext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 433)        @param ct      Ciphertext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 434)        @param blocks  The number of complete blocks to process
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 435)        @param IV      The initial value (input/output)
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 436)        @param mode    little or big endian counter (mode=0 or mode=1)
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 437)        @param skey    The scheduled key context
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 438)        @return CRYPT_OK if successful
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 439)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 440)    int (*accel_ctr_encrypt)(const unsigned char *pt, unsigned char *ct, unsigned long blocks, unsigned char *IV, int mode, symmetric_key *skey);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 441) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 442)    /** Accelerated LRW
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 443)        @param pt      Plaintext
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 444)        @param ct      Ciphertext
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 445)        @param blocks  The number of complete blocks to process
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 446)        @param IV      The initial value (input/output)
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 447)        @param tweak   The LRW tweak
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 448)        @param skey    The scheduled key context
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 449)        @return CRYPT_OK if successful
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 450)    */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 451)    int (*accel_lrw_encrypt)(const unsigned char *pt, unsigned char *ct, unsigned long blocks, unsigned char *IV, const unsigned char *tweak, symmetric_key *skey);
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 452) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 453)    /** Accelerated LRW
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 454)        @param ct      Ciphertext
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 455)        @param pt      Plaintext
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 456)        @param blocks  The number of complete blocks to process
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 457)        @param IV      The initial value (input/output)
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 458)        @param tweak   The LRW tweak
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 459)        @param skey    The scheduled key context
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 460)        @return CRYPT_OK if successful
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 461)    */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 462)    int (*accel_lrw_decrypt)(const unsigned char *ct, unsigned char *pt, unsigned long blocks, unsigned char *IV, const unsigned char *tweak, symmetric_key *skey);
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 463) 
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 464)    /** Accelerated CCM packet (one-shot)
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 465)        @param key        The secret key to use
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 466)        @param keylen     The length of the secret key (octets)
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 467)        @param uskey      A previously scheduled key [optional can be NULL]
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 468)        @param nonce      The session nonce [use once]
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 469)        @param noncelen   The length of the nonce
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 470)        @param header     The header for the session
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 471)        @param headerlen  The length of the header (octets)
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 472)        @param pt         [out] The plaintext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 473)        @param ptlen      The length of the plaintext (octets)
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 474)        @param ct         [out] The ciphertext
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 475)        @param tag        [out] The destination tag
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 476)        @param taglen     [in/out] The max size and resulting size of the authentication tag
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 477)        @param direction  Encrypt or Decrypt direction (0 or 1)
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 478)        @return CRYPT_OK if successful
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 479)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 480)    int (*accel_ccm_memory)(
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 481)        const unsigned char *key,    unsigned long keylen,
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 482)        symmetric_key       *uskey,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 483)        const unsigned char *nonce,  unsigned long noncelen,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 484)        const unsigned char *header, unsigned long headerlen,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 485)              unsigned char *pt,     unsigned long ptlen,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 486)              unsigned char *ct,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 487)              unsigned char *tag,    unsigned long *taglen,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 488)                        int  direction);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 489) 
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 490)    /** Accelerated GCM packet (one shot)
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 491)        @param key        The secret key
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 492)        @param keylen     The length of the secret key
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 493)        @param IV         The initial vector
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 494)        @param IVlen      The length of the initial vector
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 495)        @param adata      The additional authentication data (header)
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 496)        @param adatalen   The length of the adata
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 497)        @param pt         The plaintext
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 498)        @param ptlen      The length of the plaintext (ciphertext length is the same)
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 499)        @param ct         The ciphertext
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 500)        @param tag        [out] The MAC tag
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 501)        @param taglen     [in/out] The MAC tag length
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 502)        @param direction  Encrypt or Decrypt mode (GCM_ENCRYPT or GCM_DECRYPT)
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 503)        @return CRYPT_OK on success
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 504)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 505)    int (*accel_gcm_memory)(
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 506)        const unsigned char *key,    unsigned long keylen,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 507)        const unsigned char *IV,     unsigned long IVlen,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 508)        const unsigned char *adata,  unsigned long adatalen,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 509)              unsigned char *pt,     unsigned long ptlen,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 510)              unsigned char *ct,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 511)              unsigned char *tag,    unsigned long *taglen,
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 512)                        int direction);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 513) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 514)    /** Accelerated one shot LTC_OMAC
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 515)        @param key            The secret key
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 516)        @param keylen         The key length (octets)
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 517)        @param in             The message
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 518)        @param inlen          Length of message (octets)
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 519)        @param out            [out] Destination for tag
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 520)        @param outlen         [in/out] Initial and final size of out
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 521)        @return CRYPT_OK on success
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 522)    */
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 523)    int (*omac_memory)(
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 524)        const unsigned char *key, unsigned long keylen,
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 525)        const unsigned char *in,  unsigned long inlen,
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 526)              unsigned char *out, unsigned long *outlen);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 527) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 528)    /** Accelerated one shot XCBC
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 529)        @param key            The secret key
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 530)        @param keylen         The key length (octets)
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 531)        @param in             The message
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 532)        @param inlen          Length of message (octets)
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 533)        @param out            [out] Destination for tag
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 534)        @param outlen         [in/out] Initial and final size of out
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 535)        @return CRYPT_OK on success
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 536)    */
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 537)    int (*xcbc_memory)(
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 538)        const unsigned char *key, unsigned long keylen,
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 539)        const unsigned char *in,  unsigned long inlen,
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 540)              unsigned char *out, unsigned long *outlen);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 541) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 542)    /** Accelerated one shot F9
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 543)        @param key            The secret key
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 544)        @param keylen         The key length (octets)
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 545)        @param in             The message
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 546)        @param inlen          Length of message (octets)
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 547)        @param out            [out] Destination for tag
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 548)        @param outlen         [in/out] Initial and final size of out
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 549)        @return CRYPT_OK on success
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 550)        @remark Requires manual padding
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 551)    */
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 552)    int (*f9_memory)(
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 553)        const unsigned char *key, unsigned long keylen,
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 554)        const unsigned char *in,  unsigned long inlen,
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 555)              unsigned char *out, unsigned long *outlen);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 556) } cipher_descriptor[];
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 557) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 558) #ifdef LTC_BLOWFISH
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 559) int blowfish_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 560) int blowfish_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 561) int blowfish_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 562) int blowfish_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 563) void blowfish_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 564) int blowfish_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 565) extern const struct ltc_cipher_descriptor blowfish_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 566) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 567) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 568) #ifdef LTC_RC5
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 569) int rc5_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 570) int rc5_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 571) int rc5_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 572) int rc5_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 573) void rc5_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 574) int rc5_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 575) extern const struct ltc_cipher_descriptor rc5_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 576) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 577) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 578) #ifdef LTC_RC6
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 579) int rc6_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 580) int rc6_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 581) int rc6_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 582) int rc6_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 583) void rc6_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 584) int rc6_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 585) extern const struct ltc_cipher_descriptor rc6_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 586) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 587) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 588) #ifdef LTC_RC2
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 589) int rc2_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 590) int rc2_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 591) int rc2_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 592) int rc2_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 593) void rc2_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 594) int rc2_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 595) extern const struct ltc_cipher_descriptor rc2_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 596) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 597) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 598) #ifdef LTC_SAFERP
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 599) int saferp_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 600) int saferp_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 601) int saferp_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 602) int saferp_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 603) void saferp_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 604) int saferp_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 605) extern const struct ltc_cipher_descriptor saferp_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 606) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 607) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 608) #ifdef LTC_SAFER
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 609) int safer_k64_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 610) int safer_sk64_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 611) int safer_k128_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 612) int safer_sk128_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 613) int safer_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *key);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 614) int safer_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *key);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 615) int safer_k64_test(void);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 616) int safer_sk64_test(void);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 617) int safer_sk128_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 618) void safer_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 619) int safer_64_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 620) int safer_128_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 621) extern const struct ltc_cipher_descriptor safer_k64_desc, safer_k128_desc, safer_sk64_desc, safer_sk128_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 622) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 623) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 624) #ifdef LTC_RIJNDAEL
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 625) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 626) /* make aes an alias */
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 627) #define aes_setup           rijndael_setup
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 628) #define aes_ecb_encrypt     rijndael_ecb_encrypt
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 629) #define aes_ecb_decrypt     rijndael_ecb_decrypt
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 630) #define aes_test            rijndael_test
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 631) #define aes_done            rijndael_done
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 632) #define aes_keysize         rijndael_keysize
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 633) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 634) #define aes_enc_setup           rijndael_enc_setup
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 635) #define aes_enc_ecb_encrypt     rijndael_enc_ecb_encrypt
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 636) #define aes_enc_keysize         rijndael_enc_keysize
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 637) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 638) int rijndael_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 639) int rijndael_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 640) int rijndael_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 641) int rijndael_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 642) void rijndael_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 643) int rijndael_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 644) int rijndael_enc_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 645) int rijndael_enc_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 646) void rijndael_enc_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 647) int rijndael_enc_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 648) extern const struct ltc_cipher_descriptor rijndael_desc, aes_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 649) extern const struct ltc_cipher_descriptor rijndael_enc_desc, aes_enc_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 650) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 651) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 652) #ifdef LTC_XTEA
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 653) int xtea_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 654) int xtea_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 655) int xtea_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 656) int xtea_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 657) void xtea_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 658) int xtea_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 659) extern const struct ltc_cipher_descriptor xtea_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 660) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 661) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 662) #ifdef LTC_TWOFISH
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 663) int twofish_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 664) int twofish_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 665) int twofish_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 666) int twofish_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 667) void twofish_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 668) int twofish_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 669) extern const struct ltc_cipher_descriptor twofish_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 670) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 671) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 672) #ifdef LTC_DES
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 673) int des_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 674) int des_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 675) int des_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 676) int des_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 677) void des_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 678) int des_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 679) int des3_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 680) int des3_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 681) int des3_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 682) int des3_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 683) void des3_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 684) int des3_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 685) extern const struct ltc_cipher_descriptor des_desc, des3_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 686) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 687) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 688) #ifdef LTC_CAST5
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 689) int cast5_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 690) int cast5_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 691) int cast5_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 692) int cast5_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 693) void cast5_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 694) int cast5_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 695) extern const struct ltc_cipher_descriptor cast5_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 696) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 697) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 698) #ifdef LTC_NOEKEON
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 699) int noekeon_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 700) int noekeon_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 701) int noekeon_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 702) int noekeon_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 703) void noekeon_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 704) int noekeon_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 705) extern const struct ltc_cipher_descriptor noekeon_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 706) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 707) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 708) #ifdef LTC_SKIPJACK
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 709) int skipjack_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 710) int skipjack_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 711) int skipjack_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 712) int skipjack_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 713) void skipjack_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 714) int skipjack_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 715) extern const struct ltc_cipher_descriptor skipjack_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 716) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 717) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 718) #ifdef LTC_KHAZAD
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 719) int khazad_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 720) int khazad_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 721) int khazad_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 722) int khazad_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 723) void khazad_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 724) int khazad_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 725) extern const struct ltc_cipher_descriptor khazad_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 726) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 727) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 728) #ifdef LTC_ANUBIS
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 729) int anubis_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 730) int anubis_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 731) int anubis_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 732) int anubis_test(void);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 733) void anubis_done(symmetric_key *skey);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 734) int anubis_keysize(int *keysize);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 735) extern const struct ltc_cipher_descriptor anubis_desc;
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 736) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 737) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 738) #ifdef LTC_KSEED
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 739) int kseed_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 740) int kseed_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 741) int kseed_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 742) int kseed_test(void);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 743) void kseed_done(symmetric_key *skey);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 744) int kseed_keysize(int *keysize);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 745) extern const struct ltc_cipher_descriptor kseed_desc;
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 746) #endif
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 747) 
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 748) #ifdef LTC_KASUMI
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 749) int kasumi_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 750) int kasumi_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 751) int kasumi_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 752) int kasumi_test(void);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 753) void kasumi_done(symmetric_key *skey);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 754) int kasumi_keysize(int *keysize);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 755) extern const struct ltc_cipher_descriptor kasumi_desc;
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 756) #endif
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 757) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 758) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 759) #ifdef LTC_MULTI2
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 760) int multi2_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 761) int multi2_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 762) int multi2_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 763) int multi2_test(void);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 764) void multi2_done(symmetric_key *skey);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 765) int multi2_keysize(int *keysize);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 766) extern const struct ltc_cipher_descriptor multi2_desc;
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 767) #endif
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 768) 
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 769) #ifdef LTC_CAMELLIA
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 770) int camellia_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 771) int camellia_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 772) int camellia_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 773) int camellia_test(void);
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 774) void camellia_done(symmetric_key *skey);
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 775) int camellia_keysize(int *keysize);
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 776) extern const struct ltc_cipher_descriptor camellia_desc;
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 777) #endif
2f1fc7c5 (Steffen Jaeckel 2009-10-01 11:42:27 +0200 778) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 779) #ifdef LTC_ECB_MODE
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 780) int ecb_start(int cipher, const unsigned char *key,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 781)               int keylen, int num_rounds, symmetric_ECB *ecb);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 782) int ecb_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_ECB *ecb);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 783) int ecb_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_ECB *ecb);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 784) int ecb_done(symmetric_ECB *ecb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 785) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 786) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 787) #ifdef LTC_CFB_MODE
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 788) int cfb_start(int cipher, const unsigned char *IV, const unsigned char *key,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 789)               int keylen, int num_rounds, symmetric_CFB *cfb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 790) int cfb_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_CFB *cfb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 791) int cfb_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_CFB *cfb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 792) int cfb_getiv(unsigned char *IV, unsigned long *len, symmetric_CFB *cfb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 793) int cfb_setiv(const unsigned char *IV, unsigned long len, symmetric_CFB *cfb);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 794) int cfb_done(symmetric_CFB *cfb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 795) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 796) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 797) #ifdef LTC_OFB_MODE
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 798) int ofb_start(int cipher, const unsigned char *IV, const unsigned char *key,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 799)               int keylen, int num_rounds, symmetric_OFB *ofb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 800) int ofb_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_OFB *ofb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 801) int ofb_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_OFB *ofb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 802) int ofb_getiv(unsigned char *IV, unsigned long *len, symmetric_OFB *ofb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 803) int ofb_setiv(const unsigned char *IV, unsigned long len, symmetric_OFB *ofb);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 804) int ofb_done(symmetric_OFB *ofb);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 805) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 806) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 807) #ifdef LTC_CBC_MODE
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 808) int cbc_start(int cipher, const unsigned char *IV, const unsigned char *key,
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 809)                int keylen, int num_rounds, symmetric_CBC *cbc);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 810) int cbc_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_CBC *cbc);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 811) int cbc_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_CBC *cbc);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 812) int cbc_getiv(unsigned char *IV, unsigned long *len, symmetric_CBC *cbc);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 813) int cbc_setiv(const unsigned char *IV, unsigned long len, symmetric_CBC *cbc);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 814) int cbc_done(symmetric_CBC *cbc);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 815) #endif
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 816) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 817) #ifdef LTC_CTR_MODE
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 818) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 819) #define CTR_COUNTER_LITTLE_ENDIAN    0x0000
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 820) #define CTR_COUNTER_BIG_ENDIAN       0x1000
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 821) #define LTC_CTR_RFC3686              0x2000
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 822) 
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 823) int ctr_start(               int   cipher,
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 824)               const unsigned char *IV,
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 825)               const unsigned char *key,       int keylen,
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 826)                              int  num_rounds, int ctr_mode,
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 827)                    symmetric_CTR *ctr);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 828) int ctr_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_CTR *ctr);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 829) int ctr_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_CTR *ctr);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 830) int ctr_getiv(unsigned char *IV, unsigned long *len, symmetric_CTR *ctr);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 831) int ctr_setiv(const unsigned char *IV, unsigned long len, symmetric_CTR *ctr);
6ac99524 (Tom St Denis    2005-04-17 11:37:13 +0000 832) int ctr_done(symmetric_CTR *ctr);
2de2976d (Tom St Denis    2006-11-17 14:21:24 +0000 833) int ctr_test(void);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 834) #endif
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 835) 
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 836) #ifdef LTC_LRW_MODE
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 837) 
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 838) #define LRW_ENCRYPT 0
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 839) #define LRW_DECRYPT 1
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 840) 
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 841) int lrw_start(               int   cipher,
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 842)               const unsigned char *IV,
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 843)               const unsigned char *key,       int keylen,
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 844)               const unsigned char *tweak,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 845)                              int  num_rounds,
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 846)                    symmetric_LRW *lrw);
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 847) int lrw_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_LRW *lrw);
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 848) int lrw_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_LRW *lrw);
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 849) int lrw_getiv(unsigned char *IV, unsigned long *len, symmetric_LRW *lrw);
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 850) int lrw_setiv(const unsigned char *IV, unsigned long len, symmetric_LRW *lrw);
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 851) int lrw_done(symmetric_LRW *lrw);
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 852) int lrw_test(void);
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 853) 
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 854) /* don't call */
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 855) int lrw_process(const unsigned char *pt, unsigned char *ct, unsigned long len, int mode, symmetric_LRW *lrw);
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 856) #endif
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 857) 
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 858) #ifdef LTC_F8_MODE
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 859) int f8_start(                int  cipher, const unsigned char *IV,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 860)              const unsigned char *key,                    int  keylen,
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 861)              const unsigned char *salt_key,               int  skeylen,
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 862)                              int  num_rounds,   symmetric_F8  *f8);
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 863) int f8_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_F8 *f8);
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 864) int f8_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_F8 *f8);
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 865) int f8_getiv(unsigned char *IV, unsigned long *len, symmetric_F8 *f8);
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 866) int f8_setiv(const unsigned char *IV, unsigned long len, symmetric_F8 *f8);
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 867) int f8_done(symmetric_F8 *f8);
479cc9c2 (Tom St Denis    2006-08-30 23:30:00 +0000 868) int f8_test_mode(void);
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 869) #endif
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 870) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 871) #ifdef LTC_XTS_MODE
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 872) typedef struct {
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 873)    symmetric_key  key1, key2;
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 874)    int            cipher;
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 875) } symmetric_xts;
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 876) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 877) int xts_start(                int  cipher,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 878)               const unsigned char *key1,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 879)               const unsigned char *key2,
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 880)                     unsigned long  keylen,
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 881)                               int  num_rounds,
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 882)                     symmetric_xts *xts);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 883) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 884) int xts_encrypt(
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 885)    const unsigned char *pt, unsigned long ptlen,
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 886)          unsigned char *ct,
adc54d08 (Pascal Brand    2014-09-18 01:42:54 +0200 887)          unsigned char *tweak,
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 888)          symmetric_xts *xts);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 889) int xts_decrypt(
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 890)    const unsigned char *ct, unsigned long ptlen,
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 891)          unsigned char *pt,
adc54d08 (Pascal Brand    2014-09-18 01:42:54 +0200 892)          unsigned char *tweak,
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 893)          symmetric_xts *xts);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 894) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 895) void xts_done(symmetric_xts *xts);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 896) int  xts_test(void);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 897) void xts_mult_x(unsigned char *I);
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000 898) #endif
a3ce807b (Tom St Denis    2006-01-26 18:11:56 +0000 899) 
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 900) int find_cipher(const char *name);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 901) int find_cipher_any(const char *name, int blocklen, int keylen);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 902) int find_cipher_id(unsigned char ID);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 903) int register_cipher(const struct ltc_cipher_descriptor *cipher);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 904) int unregister_cipher(const struct ltc_cipher_descriptor *cipher);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 905) int cipher_is_valid(int idx);
bfc2f5b0 (Tom St Denis    2004-12-30 23:55:53 +0000 906) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 907) LTC_MUTEX_PROTO(ltc_cipher_mutex)
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 908) 
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 909) /* $Source$ */
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 910) /* $Revision$ */
3964a652 (Tom St Denis    2005-06-09 00:08:13 +0000 911) /* $Date$ */
