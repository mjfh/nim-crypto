^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000   1) /* This is the build config file.
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000   2)  *
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000   3)  * With this you can setup what to inlcude/exclude automatically during any build.  Just comment
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000   4)  * out the line that #define's the word for the thing you want to remove.  phew!
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000   5)  */
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000   6) 
bfc2f5b0 src/headers/tomcrypt_cfg.h (Tom St Denis      2004-12-30 23:55:53 +0000   7) #ifndef TOMCRYPT_CFG_H
bfc2f5b0 src/headers/tomcrypt_cfg.h (Tom St Denis      2004-12-30 23:55:53 +0000   8) #define TOMCRYPT_CFG_H
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000   9) 
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  10) #if defined(_WIN32) || defined(_MSC_VER)
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  11) #define LTC_CALL __cdecl
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  12) #else
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  13) #ifndef LTC_CALL
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  14)    #define LTC_CALL
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  15) #endif
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  16) #endif
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  17) 
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  18) #ifndef LTC_EXPORT
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  19) #define LTC_EXPORT
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  20) #endif
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  21) 
2de2976d src/headers/tomcrypt_cfg.h (Tom St Denis      2006-11-17 14:21:24 +0000  22) /* certain platforms use macros for these, making the prototypes broken */
2de2976d src/headers/tomcrypt_cfg.h (Tom St Denis      2006-11-17 14:21:24 +0000  23) #ifndef LTC_NO_PROTOTYPES
2de2976d src/headers/tomcrypt_cfg.h (Tom St Denis      2006-11-17 14:21:24 +0000  24) 
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  25) /* you can change how memory allocation works ... */
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  26) LTC_EXPORT void * LTC_CALL XMALLOC(size_t n);
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  27) LTC_EXPORT void * LTC_CALL XREALLOC(void *p, size_t n);
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  28) LTC_EXPORT void * LTC_CALL XCALLOC(size_t n, size_t s);
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  29) LTC_EXPORT void LTC_CALL XFREE(void *p);
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  30) 
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  31) LTC_EXPORT void LTC_CALL XQSORT(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *));
1eeff0bf src/headers/tomcrypt_cfg.h (Tom St Denis      2005-11-24 11:57:58 +0000  32) 
1eeff0bf src/headers/tomcrypt_cfg.h (Tom St Denis      2005-11-24 11:57:58 +0000  33) 
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  34) /* change the clock function too */
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  35) LTC_EXPORT clock_t LTC_CALL XCLOCK(void);
1a114162 mycrypt_cfg.h              (Tom St Denis      2004-06-20 02:41:49 +0000  36) 
1a114162 mycrypt_cfg.h              (Tom St Denis      2004-06-20 02:41:49 +0000  37) /* various other functions */
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  38) LTC_EXPORT void * LTC_CALL XMEMCPY(void *dest, const void *src, size_t n);
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  39) LTC_EXPORT int   LTC_CALL XMEMCMP(const void *s1, const void *s2, size_t n);
2945dea3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-05-29 23:12:56 +0000  40) LTC_EXPORT void * LTC_CALL XMEMSET(void *s, int c, size_t n);
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  41) 
e24b01d3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-12-16 18:10:04 +0000  42) LTC_EXPORT int   LTC_CALL XSTRCMP(const char *s1, const char *s2);
e24b01d3 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-12-16 18:10:04 +0000  43) 
2de2976d src/headers/tomcrypt_cfg.h (Tom St Denis      2006-11-17 14:21:24 +0000  44) #endif
2de2976d src/headers/tomcrypt_cfg.h (Tom St Denis      2006-11-17 14:21:24 +0000  45) 
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000  46) /* type of argument checking, 0=default, 1=fatal and 2=error+continue, 3=nothing */
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000  47) #ifndef ARGTYPE
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000  48)    #define ARGTYPE  0
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000  49) #endif
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  50) 
bfcf1eb2 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2012-07-26 14:43:15 +0200  51) /* Controls endianess and size of registers.  Leave uncommented to get platform neutral [slower] code
bfcf1eb2 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2012-07-26 14:43:15 +0200  52)  *
69f289d6 mycrypt_cfg.h              (Tom St Denis      2004-08-06 16:42:41 +0000  53)  * Note: in order to use the optimized macros your platform must support unaligned 32 and 64 bit read/writes.
69f289d6 mycrypt_cfg.h              (Tom St Denis      2004-08-06 16:42:41 +0000  54)  * The x86 platforms allow this but some others [ARM for instance] do not.  On those platforms you **MUST**
69f289d6 mycrypt_cfg.h              (Tom St Denis      2004-08-06 16:42:41 +0000  55)  * use the portable [slower] macros.
69f289d6 mycrypt_cfg.h              (Tom St Denis      2004-08-06 16:42:41 +0000  56)  */
69f289d6 mycrypt_cfg.h              (Tom St Denis      2004-08-06 16:42:41 +0000  57) 
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  58) /* detect x86-32 machines somewhat */
3c6a8052 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-07-12 17:28:54 +0200  59) #if !defined(__STRICT_ANSI__) && !defined(_WIN64) && ((defined(_MSC_VER) && defined(WIN32)) || (defined(__GNUC__) && (defined(__DJGPP__) || defined(__CYGWIN__) || defined(__MINGW32__) || defined(__i386__))))
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  60)    #define ENDIAN_LITTLE
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  61)    #define ENDIAN_32BITWORD
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000  62)    #define LTC_FAST
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  63) #endif
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  64) 
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  65) /* detects MIPS R5900 processors (PS2) */
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  66) #if (defined(__R5900) || defined(R5900) || defined(__R5900__)) && (defined(_mips) || defined(__mips__) || defined(mips))
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  67)    #define ENDIAN_LITTLE
1c1822d5 mycrypt_cfg.h              (Tom St Denis      2004-10-30 03:00:26 +0000  68)    #define ENDIAN_64BITWORD
1c1822d5 mycrypt_cfg.h              (Tom St Denis      2004-10-30 03:00:26 +0000  69) #endif
1c1822d5 mycrypt_cfg.h              (Tom St Denis      2004-10-30 03:00:26 +0000  70) 
1c1822d5 mycrypt_cfg.h              (Tom St Denis      2004-10-30 03:00:26 +0000  71) /* detect amd64 */
64d7ebe1 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-04-06 19:48:32 +0000  72) #if !defined(__STRICT_ANSI__) && defined(__x86_64__)
1c1822d5 mycrypt_cfg.h              (Tom St Denis      2004-10-30 03:00:26 +0000  73)    #define ENDIAN_LITTLE
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000  74)    #define ENDIAN_64BITWORD
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000  75)    #define LTC_FAST
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000  76) #endif
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000  77) 
4a1a5796 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-11-18 05:15:37 +0000  78) /* detect PPC32 */
64d7ebe1 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-04-06 19:48:32 +0000  79) #if !defined(__STRICT_ANSI__) && defined(LTC_PPC32)
4a1a5796 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-11-18 05:15:37 +0000  80)    #define ENDIAN_BIG
4a1a5796 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-11-18 05:15:37 +0000  81)    #define ENDIAN_32BITWORD
4a1a5796 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-11-18 05:15:37 +0000  82)    #define LTC_FAST
bfcf1eb2 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2012-07-26 14:43:15 +0200  83) #endif
4a1a5796 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-11-18 05:15:37 +0000  84) 
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  85) /* fix for MSVC ...evil! */
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  86) #ifdef _MSC_VER
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  87)    #define CONST64(n) n ## ui64
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  88)    typedef unsigned __int64 ulong64;
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  89) #else
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  90)    #define CONST64(n) n ## ULL
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  91)    typedef unsigned long long ulong64;
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  92) #endif
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  93) 
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  94) /* this is the "32-bit at least" data type
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  95)  * Re-define it to suit your platform but it must be at least 32-bits
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  96)  */
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  97) #if defined(__x86_64__) || (defined(__sparc__) && defined(__arch64__))
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  98)    typedef unsigned ulong32;
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200  99) #else
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200 100)    typedef unsigned long ulong32;
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200 101) #endif
1f7cf9dc src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 15:05:56 +0200 102) 
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 103) #ifdef LTC_FAST
3c6a8052 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-07-12 17:28:54 +0200 104) #if __GNUC__ < 4 /* if the compiler does not support gnu extensions, i.e. its neither clang nor gcc nor icc */
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 105) #error the LTC_FAST hack is only available on compilers that support __attribute__((may_alias)) - disable it for your compiler, and dont worry, it won`t buy you much anyway
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 106) #else
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 107) #ifdef ENDIAN_64BITWORD
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 108) typedef ulong64 __attribute__((__may_alias__)) LTC_FAST_TYPE;
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 109) #else
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 110) typedef ulong32 __attribute__((__may_alias__)) LTC_FAST_TYPE;
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 111) #endif
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 112) #endif
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 113) #endif /* LTC_FAST */
ffeb70b4 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-04-03 22:22:01 +0200 114) 
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 115) /* detect sparc and sparc64 */
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 116) #if defined(__sparc__)
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 117)   #define ENDIAN_BIG
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 118)   #if defined(__arch64__)
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 119)     #define ENDIAN_64BITWORD
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 120)   #else
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 121)     #define ENDIAN_32BITWORD
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 122)   #endif
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 123) #endif
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 124) 
f597f29e src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-09-10 16:15:35 +0200 125) #ifdef ENDIAN_64BITWORD
f597f29e src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-09-10 16:15:35 +0200 126) typedef ulong64 ltc_mp_digit;
f597f29e src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-09-10 16:15:35 +0200 127) #else
f597f29e src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-09-10 16:15:35 +0200 128) typedef ulong32 ltc_mp_digit;
f597f29e src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-09-10 16:15:35 +0200 129) #endif
72412f6d src/headers/tomcrypt_cfg.h (Tom St Denis      2005-08-01 16:36:47 +0000 130) 
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 131) #ifdef LTC_NO_FAST
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 132)    #ifdef LTC_FAST
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 133)       #undef LTC_FAST
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 134)    #endif
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 135) #endif
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 136) 
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 137) /* No asm is a quick way to disable anything "not portable" */
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 138) #ifdef LTC_NO_ASM
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 139)    #undef ENDIAN_LITTLE
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 140)    #undef ENDIAN_BIG
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 141)    #undef ENDIAN_32BITWORD
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 142)    #undef ENDIAN_64BITWORD
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 143)    #undef LTC_FAST
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 144)    #undef LTC_FAST_TYPE
6ac99524 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-04-17 11:37:13 +0000 145)    #define LTC_NO_ROLC
8e7777b5 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-01-03 15:16:59 +0100 146)    #define LTC_NO_BSWAP
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 147) #endif
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 148) 
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 149) /* #define ENDIAN_LITTLE */
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 150) /* #define ENDIAN_BIG */
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 151) 
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 152) /* #define ENDIAN_32BITWORD */
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 153) /* #define ENDIAN_64BITWORD */
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 154) 
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 155) #if (defined(ENDIAN_BIG) || defined(ENDIAN_LITTLE)) && !(defined(ENDIAN_32BITWORD) || defined(ENDIAN_64BITWORD))
64d7ebe1 src/headers/tomcrypt_cfg.h (Tom St Denis      2006-04-06 19:48:32 +0000 156)     #error You must specify a word size as well as endianess in tomcrypt_cfg.h
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 157) #endif
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 158) 
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 159) #if !(defined(ENDIAN_BIG) || defined(ENDIAN_LITTLE))
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 160)    #define ENDIAN_NEUTRAL
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 161) #endif
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 162) 
6dfb0808 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-07-12 17:26:30 +0200 163) #if (defined(ENDIAN_32BITWORD) && defined(ENDIAN_64BITWORD))
6dfb0808 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-07-12 17:26:30 +0200 164)     #error Can not be 32 and 64 bit words...
6dfb0808 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-07-12 17:26:30 +0200 165) #endif
6dfb0808 src/headers/tomcrypt_cfg.h (Steffen Jaeckel   2014-07-12 17:26:30 +0200 166) 
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 167) /* gcc 4.3 and up has a bswap builtin; detect it by gcc version.
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 168)  * clang also supports the bswap builtin, and although clang pretends
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 169)  * to be gcc (macro-wise, anyway), clang pretends to be a version
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 170)  * prior to gcc 4.3, so we can't detect bswap that way.  Instead,
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 171)  * clang has a __has_builtin mechanism that can be used to check
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 172)  * for builtins:
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 173)  * http://clang.llvm.org/docs/LanguageExtensions.html#feature_check */
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 174) #ifndef __has_builtin
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 175)    #define __has_builtin(x) 0
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 176) #endif
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 177) #if !defined(LTC_NO_BSWAP) && defined(__GNUC__) &&                      \
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 178)    ((__GNUC__ * 100 + __GNUC_MINOR__ >= 403) ||                         \
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 179)     (__has_builtin(__builtin_bswap32) && __has_builtin(__builtin_bswap64)))
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 180)    #define LTC_HAVE_BSWAP_BUILTIN
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 181) #endif
382c9d4d src/headers/tomcrypt_cfg.h (Patrick Pelletier 2011-09-26 00:39:19 -0700 182) 
bfc2f5b0 src/headers/tomcrypt_cfg.h (Tom St Denis      2004-12-30 23:55:53 +0000 183) #endif
^a6a5fc6 mycrypt_cfg.h              (Tom St Denis      2003-03-03 00:59:24 +0000 184) 
3964a652 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-06-09 00:08:13 +0000 185) 
3964a652 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-06-09 00:08:13 +0000 186) /* $Source$ */
3964a652 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-06-09 00:08:13 +0000 187) /* $Revision$ */
3964a652 src/headers/tomcrypt_cfg.h (Tom St Denis      2005-06-09 00:08:13 +0000 188) /* $Date$ */
