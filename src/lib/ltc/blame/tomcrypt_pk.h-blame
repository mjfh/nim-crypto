^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000   1) /* ---- NUMBER THEORY ---- */
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000   2) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000   3) enum {
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000   4)    PK_PUBLIC=0,
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000   5)    PK_PRIVATE=1
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000   6) };
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000   7) 
f58c8786 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-08-31 14:57:35 +0200   8) /* Indicates standard output formats that can be read e.g. by OpenSSL or GnuTLS */
f58c8786 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-08-31 14:57:35 +0200   9) #define PK_STD          0x1000
f58c8786 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-08-31 14:57:35 +0200  10) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  11) int rand_prime(void *N, long len, prng_state *prng, int wprng);
e271b9fd src/headers/tomcrypt_pk.h (Karel Miko              2014-01-07 21:39:25 +0100  12) int rand_bn_bits(void *N, int bits, prng_state *prng, int wprng);
e271b9fd src/headers/tomcrypt_pk.h (Karel Miko              2014-01-07 21:39:25 +0100  13) int rand_bn_range(void *N, void *limit, prng_state *prng, int wprng);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  14) 
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  15) enum {
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  16)    PKA_RSA,
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  17)    PKA_DSA
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  18) };
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  19) 
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  20) typedef struct Oid {
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  21)     unsigned long OID[16];
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  22)     /** Length of DER encoding */
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  23)     unsigned long OIDlen;
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  24) } oid_st;
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  25) 
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  26) int pk_get_oid(int pk, oid_st *st);
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100  27) 
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  28) /* ---- RSA ---- */
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000  29) #ifdef LTC_MRSA
40c5578a mycrypt_pk.h              (Tom St Denis            2004-05-12 20:42:16 +0000  30) 
8e7777b5 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-01-03 15:16:59 +0100  31) /** RSA PKCS style key */
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  32) typedef struct Rsa_key {
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  33)     /** Type of key, PK_PRIVATE or PK_PUBLIC */
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  34)     int type;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  35)     /** The public exponent */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200  36)     void *e;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  37)     /** The private exponent */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200  38)     void *d;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  39)     /** The modulus */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200  40)     void *N;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  41)     /** The p factor of N */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200  42)     void *p;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  43)     /** The q factor of N */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200  44)     void *q;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  45)     /** The 1/q mod p CRT param */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200  46)     void *qP;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  47)     /** The d mod (p - 1) CRT param */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200  48)     void *dP;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  49)     /** The d mod (q - 1) CRT param */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000  50)     void *dQ;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  51) } rsa_key;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  52) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000  53) int rsa_make_key(prng_state *prng, int wprng, int size, long e, rsa_key *key);
73c201da src/headers/tomcrypt_pk.h (Steffen Jaeckel         2013-09-03 14:24:14 +0200  54) 
73c201da src/headers/tomcrypt_pk.h (Steffen Jaeckel         2013-09-03 14:24:14 +0200  55) int rsa_get_size(rsa_key *key);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  56) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000  57) int rsa_exptmod(const unsigned char *in,   unsigned long inlen,
3fe312cc mycrypt_pk.h              (Tom St Denis            2004-05-31 02:36:47 +0000  58)                       unsigned char *out,  unsigned long *outlen, int which,
3fe312cc mycrypt_pk.h              (Tom St Denis            2004-05-31 02:36:47 +0000  59)                       rsa_key *key);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  60) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000  61) void rsa_free(rsa_key *key);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000  62) 
8e7777b5 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-01-03 15:16:59 +0100  63) /* These use PKCS #1 v2.0 padding */
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  64) #define rsa_encrypt_key(_in, _inlen, _out, _outlen, _lparam, _lparamlen, _prng, _prng_idx, _hash_idx, _key) \
3522c754 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2009-10-01 14:00:58 +0200  65)   rsa_encrypt_key_ex(_in, _inlen, _out, _outlen, _lparam, _lparamlen, _prng, _prng_idx, _hash_idx, LTC_PKCS_1_OAEP, _key)
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  66) 
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  67) #define rsa_decrypt_key(_in, _inlen, _out, _outlen, _lparam, _lparamlen, _hash_idx, _stat, _key) \
3522c754 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2009-10-01 14:00:58 +0200  68)   rsa_decrypt_key_ex(_in, _inlen, _out, _outlen, _lparam, _lparamlen, _hash_idx, LTC_PKCS_1_OAEP, _stat, _key)
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  69) 
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  70) #define rsa_sign_hash(_in, _inlen, _out, _outlen, _prng, _prng_idx, _hash_idx, _saltlen, _key) \
3522c754 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2009-10-01 14:00:58 +0200  71)   rsa_sign_hash_ex(_in, _inlen, _out, _outlen, LTC_PKCS_1_PSS, _prng, _prng_idx, _hash_idx, _saltlen, _key)
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  72) 
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  73) #define rsa_verify_hash(_sig, _siglen, _hash, _hashlen, _hash_idx, _saltlen, _stat, _key) \
3522c754 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2009-10-01 14:00:58 +0200  74)   rsa_verify_hash_ex(_sig, _siglen, _hash, _hashlen, LTC_PKCS_1_PSS, _hash_idx, _saltlen, _stat, _key)
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  75) 
aacfec44 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2013-09-03 14:25:00 +0200  76) #define rsa_sign_saltlen_get_max(_hash_idx, _key) \
aacfec44 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2013-09-03 14:25:00 +0200  77)   rsa_sign_saltlen_get_max_ex(LTC_PKCS_1_PSS, _hash_idx, _key)
aacfec44 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2013-09-03 14:25:00 +0200  78) 
8e7777b5 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-01-03 15:16:59 +0100  79) /* These can be switched between PKCS #1 v2.x and PKCS #1 v1.5 paddings */
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  80) int rsa_encrypt_key_ex(const unsigned char *in,     unsigned long inlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  81)                              unsigned char *out,    unsigned long *outlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  82)                        const unsigned char *lparam, unsigned long lparamlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  83)                        prng_state *prng, int prng_idx, int hash_idx, int padding, rsa_key *key);
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  84) 
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  85) int rsa_decrypt_key_ex(const unsigned char *in,       unsigned long  inlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  86)                              unsigned char *out,      unsigned long *outlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  87)                        const unsigned char *lparam,   unsigned long  lparamlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  88)                              int            hash_idx, int            padding,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  89)                              int           *stat,     rsa_key       *key);
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  90) 
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  91) int rsa_sign_hash_ex(const unsigned char *in,       unsigned long  inlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  92)                            unsigned char *out,      unsigned long *outlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  93)                            int            padding,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  94)                            prng_state    *prng,     int            prng_idx,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  95)                            int            hash_idx, unsigned long  saltlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  96)                            rsa_key *key);
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  97) 
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  98) int rsa_verify_hash_ex(const unsigned char *sig,      unsigned long siglen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000  99)                        const unsigned char *hash,     unsigned long hashlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000 100)                              int            padding,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000 101)                              int            hash_idx, unsigned long saltlen,
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000 102)                              int           *stat,     rsa_key      *key);
3fe312cc mycrypt_pk.h              (Tom St Denis            2004-05-31 02:36:47 +0000 103) 
aacfec44 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2013-09-03 14:25:00 +0200 104) int rsa_sign_saltlen_get_max_ex(int padding, int hash_idx, rsa_key *key);
aacfec44 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2013-09-03 14:25:00 +0200 105) 
8e7777b5 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-01-03 15:16:59 +0100 106) /* PKCS #1 import/export */
3fe312cc mycrypt_pk.h              (Tom St Denis            2004-05-31 02:36:47 +0000 107) int rsa_export(unsigned char *out, unsigned long *outlen, int type, rsa_key *key);
3fe312cc mycrypt_pk.h              (Tom St Denis            2004-05-31 02:36:47 +0000 108) int rsa_import(const unsigned char *in, unsigned long inlen, rsa_key *key);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 109) 
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 110) #endif
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 111) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 112) /* ---- Katja ---- */
155a54ba src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-07-17 10:49:05 +0200 113) #ifdef LTC_MKAT
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 114) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 115) /* Min and Max KAT key sizes (in bits) */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 116) #define MIN_KAT_SIZE 1024
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 117) #define MAX_KAT_SIZE 4096
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 118) 
8e7777b5 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-01-03 15:16:59 +0100 119) /** Katja PKCS style key */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 120) typedef struct KAT_key {
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 121)     /** Type of key, PK_PRIVATE or PK_PUBLIC */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 122)     int type;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 123)     /** The private exponent */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 124)     void *d;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 125)     /** The modulus */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 126)     void *N;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 127)     /** The p factor of N */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 128)     void *p;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 129)     /** The q factor of N */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 130)     void *q;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 131)     /** The 1/q mod p CRT param */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 132)     void *qP;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 133)     /** The d mod (p - 1) CRT param */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 134)     void *dP;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 135)     /** The d mod (q - 1) CRT param */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 136)     void *dQ;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 137)     /** The pq param */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 138)     void *pq;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 139) } katja_key;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 140) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 141) int katja_make_key(prng_state *prng, int wprng, int size, katja_key *key);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 142) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 143) int katja_exptmod(const unsigned char *in,   unsigned long inlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 144)                         unsigned char *out,  unsigned long *outlen, int which,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 145)                         katja_key *key);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 146) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 147) void katja_free(katja_key *key);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 148) 
8e7777b5 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-01-03 15:16:59 +0100 149) /* These use PKCS #1 v2.0 padding */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 150) int katja_encrypt_key(const unsigned char *in,     unsigned long inlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 151)                             unsigned char *out,    unsigned long *outlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 152)                       const unsigned char *lparam, unsigned long lparamlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 153)                       prng_state *prng, int prng_idx, int hash_idx, katja_key *key);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 154) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 155) int katja_decrypt_key(const unsigned char *in,       unsigned long inlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 156)                             unsigned char *out,      unsigned long *outlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 157)                       const unsigned char *lparam,   unsigned long lparamlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 158)                             int            hash_idx, int *stat,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 159)                             katja_key       *key);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 160) 
8e7777b5 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-01-03 15:16:59 +0100 161) /* PKCS #1 import/export */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 162) int katja_export(unsigned char *out, unsigned long *outlen, int type, katja_key *key);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 163) int katja_import(const unsigned char *in, unsigned long inlen, katja_key *key);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 164) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 165) #endif
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 166) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 167) /* ---- DH Routines ---- */
65fd19c1 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-02-25 09:59:21 +0100 168) #ifdef LTC_MDH
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 169) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 170) typedef struct Dh_key {
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 171)     int idx, type;
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 172)     void *x;
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 173)     void *y;
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 174) } dh_key;
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 175) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 176) int dh_compat_test(void);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 177) void dh_sizes(int *low, int *high);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 178) int dh_get_size(dh_key *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 179) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 180) int dh_make_key(prng_state *prng, int wprng, int keysize, dh_key *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 181) void dh_free(dh_key *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 182) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 183) int dh_export(unsigned char *out, unsigned long *outlen, int type, dh_key *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 184) int dh_import(const unsigned char *in, unsigned long inlen, dh_key *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 185) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 186) int dh_shared_secret(dh_key        *private_key, dh_key        *public_key,
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 187)                      unsigned char *out,         unsigned long *outlen);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 188) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 189) int dh_encrypt_key(const unsigned char *in,    unsigned long  keylen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 190)                          unsigned char *out,   unsigned long *outlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 191)                          prng_state    *prng,  int wprng, int hash,
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 192)                          dh_key        *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 193) 
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 194) int dh_decrypt_key(const unsigned char *in,  unsigned long  inlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 195)                          unsigned char *out, unsigned long *outlen,
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 196)                          dh_key *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 197) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 198) int dh_sign_hash(const unsigned char *in,   unsigned long inlen,
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 199)                        unsigned char *out,  unsigned long *outlen,
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 200)                        prng_state    *prng, int wprng, dh_key *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 201) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 202) int dh_verify_hash(const unsigned char *sig,  unsigned long siglen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 203)                    const unsigned char *hash, unsigned long hashlen,
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 204)                    int *stat, dh_key *key);
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 205) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 206) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 207) #endif
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 208) 
6fecec10 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2011-01-18 20:06:03 +0100 209) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 210) /* ---- ECC Routines ---- */
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 211) #ifdef LTC_MECC
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 212) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 213) /* size of our temp buffers for exported keys */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 214) #define ECC_BUF_SIZE 256
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 215) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 216) /* max private key size */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 217) #define ECC_MAXSIZE  66
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 218) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 219) /** Structure defines a NIST GF(p) curve */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 220) typedef struct {
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 221)    /** The size of the curve in octets */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 222)    int size;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 223) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 224)    /** name of curve */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 225)    char *name;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 226) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 227)    /** The prime that defines the field the curve is in (encoded in hex) */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 228)    char *prime;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 229) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 230)    /** The fields B param (hex) */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 231)    char *B;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 232) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 233)    /** The order of the curve (hex) */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 234)    char *order;
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 235) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 236)    /** The x co-ordinate of the base point on the curve (hex) */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 237)    char *Gx;
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 238) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 239)    /** The y co-ordinate of the base point on the curve (hex) */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 240)    char *Gy;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 241) } ltc_ecc_set_type;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 242) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 243) /** A point on a ECC curve, stored in Jacbobian format such that (x,y,z) => (x/z^2, y/z^3, 1) when interpretted as affine */
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 244) typedef struct {
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 245)     /** The x co-ordinate */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 246)     void *x;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 247) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 248)     /** The y co-ordinate */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 249)     void *y;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 250) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 251)     /** The z co-ordinate */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 252)     void *z;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 253) } ecc_point;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 254) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 255) /** An ECC key */
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 256) typedef struct {
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 257)     /** Type of key, PK_PRIVATE or PK_PUBLIC */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 258)     int type;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 259) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 260)     /** Index into the ltc_ecc_sets[] for the parameters of this curve; if -1, then this key is using user supplied curve in dp */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 261)     int idx;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 262) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 263) 	/** pointer to domain parameters; either points to NIST curves (identified by idx >= 0) or user supplied curve */
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 264) 	const ltc_ecc_set_type *dp;
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 265) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 266)     /** The public key */
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 267)     ecc_point pubkey;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 268) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 269)     /** The private key */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 270)     void *k;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 271) } ecc_key;
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 272) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 273) /** the ECC params provided */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 274) extern const ltc_ecc_set_type ltc_ecc_sets[];
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 275) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 276) int  ecc_test(void);
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 277) void ecc_sizes(int *low, int *high);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 278) int  ecc_get_size(ecc_key *key);
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 279) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 280) int  ecc_make_key(prng_state *prng, int wprng, int keysize, ecc_key *key);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 281) int  ecc_make_key_ex(prng_state *prng, int wprng, ecc_key *key, const ltc_ecc_set_type *dp);
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 282) void ecc_free(ecc_key *key);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 283) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 284) int  ecc_export(unsigned char *out, unsigned long *outlen, int type, ecc_key *key);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 285) int  ecc_import(const unsigned char *in, unsigned long inlen, ecc_key *key);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 286) int  ecc_import_ex(const unsigned char *in, unsigned long inlen, ecc_key *key, const ltc_ecc_set_type *dp);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 287) 
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000 288) int ecc_ansi_x963_export(ecc_key *key, unsigned char *out, unsigned long *outlen);
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000 289) int ecc_ansi_x963_import(const unsigned char *in, unsigned long inlen, ecc_key *key);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 290) int ecc_ansi_x963_import_ex(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp);
2de2976d src/headers/tomcrypt_pk.h (Tom St Denis            2006-11-17 14:21:24 +0000 291) 
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 292) int  ecc_shared_secret(ecc_key *private_key, ecc_key *public_key,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 293)                        unsigned char *out, unsigned long *outlen);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 294) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 295) int  ecc_encrypt_key(const unsigned char *in,   unsigned long inlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 296)                            unsigned char *out,  unsigned long *outlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 297)                            prng_state *prng, int wprng, int hash,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 298)                            ecc_key *key);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 299) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 300) int  ecc_decrypt_key(const unsigned char *in,  unsigned long  inlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 301)                            unsigned char *out, unsigned long *outlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 302)                            ecc_key *key);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 303) 
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 304) int  ecc_sign_hash(const unsigned char *in,  unsigned long inlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 305)                          unsigned char *out, unsigned long *outlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 306)                          prng_state *prng, int wprng, ecc_key *key);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 307) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 308) int  ecc_verify_hash(const unsigned char *sig,  unsigned long siglen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 309)                      const unsigned char *hash, unsigned long hashlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 310)                      int *stat, ecc_key *key);
^a6a5fc6 mycrypt_pk.h              (Tom St Denis            2003-03-03 00:59:24 +0000 311) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 312) /* low level functions */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 313) ecc_point *ltc_ecc_new_point(void);
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 314) void       ltc_ecc_del_point(ecc_point *p);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 315) int        ltc_ecc_is_valid_idx(int n);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 316) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 317) /* point ops (mp == montgomery digit) */
0aee5f32 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-03-04 21:29:40 +0100 318) #if !defined(LTC_MECC_ACCEL) || defined(LTM_DESC) || defined(GMP_DESC)
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 319) /* R = 2P */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 320) int ltc_ecc_projective_dbl_point(ecc_point *P, ecc_point *R, void *modulus, void *mp);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 321) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 322) /* R = P + Q */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 323) int ltc_ecc_projective_add_point(ecc_point *P, ecc_point *Q, ecc_point *R, void *modulus, void *mp);
64d7ebe1 src/headers/tomcrypt_pk.h (Tom St Denis            2006-04-06 19:48:32 +0000 324) #endif
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 325) 
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 326) #if defined(LTC_MECC_FP)
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 327) /* optimized point multiplication using fixed point cache (HAC algorithm 14.117) */
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 328) int ltc_ecc_fp_mulmod(void *k, ecc_point *G, ecc_point *R, void *modulus, int map);
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 329) 
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 330) /* functions for saving/loading/freeing/adding to fixed point cache */
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 331) int ltc_ecc_fp_save_state(unsigned char **out, unsigned long *outlen);
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 332) int ltc_ecc_fp_restore_state(unsigned char *in, unsigned long inlen);
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 333) void ltc_ecc_fp_free(void);
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 334) int ltc_ecc_fp_add_point(ecc_point *g, void *modulus, int lock);
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 335) 
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 336) /* lock/unlock all points currently in fixed point cache */
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 337) void ltc_ecc_fp_tablelock(int lock);
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 338) #endif
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 339) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 340) /* R = kG */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 341) int ltc_ecc_mulmod(void *k, ecc_point *G, ecc_point *R, void *modulus, int map);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 342) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 343) #ifdef LTC_ECC_SHAMIR
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 344) /* kA*A + kB*B = C */
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 345) int ltc_ecc_mul2add(ecc_point *A, void *kA,
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 346)                     ecc_point *B, void *kB,
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 347)                     ecc_point *C,
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 348)                          void *modulus);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 349) 
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 350) #ifdef LTC_MECC_FP
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 351) /* Shamir's trick with optimized point multiplication using fixed point cache */
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 352) int ltc_ecc_fp_mul2add(ecc_point *A, void *kA,
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 353)                        ecc_point *B, void *kB,
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 354)                        ecc_point *C, void *modulus);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 355) #endif
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 356) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 357) #endif
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 358) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 359) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 360) /* map P to affine from projective */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 361) int ltc_ecc_map(ecc_point *P, void *modulus, void *mp);
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 362) 
d5fbe63b mycrypt_pk.h              (Tom St Denis            2003-03-03 01:02:10 +0000 363) #endif
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 364) 
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 365) #ifdef LTC_MDSA
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 366) 
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 367) /* Max diff between group and modulus size in bytes */
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 368) #define LTC_MDSA_DELTA     512
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 369) 
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 370) /* Max DSA group size in bytes (default allows 4k-bit groups) */
bbc52b9e src/headers/tomcrypt_pk.h (Tom St Denis            2007-07-20 17:48:02 +0000 371) #define LTC_MDSA_MAX_GROUP 512
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 372) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 373) /** DSA key structure */
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 374) typedef struct {
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 375)    /** The key type, PK_PRIVATE or PK_PUBLIC */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 376)    int type;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 377) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 378)    /** The order of the sub-group used in octets */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 379)    int qord;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 380) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 381)    /** The generator  */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 382)    void *g;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 383) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 384)    /** The prime used to generate the sub-group */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 385)    void *q;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 386) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 387)    /** The large prime that generats the field the contains the sub-group */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 388)    void *p;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 389) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 390)    /** The private key */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 391)    void *x;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 392) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 393)    /** The public key */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 394)    void *y;
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 395) } dsa_key;
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 396) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 397) int dsa_make_key(prng_state *prng, int wprng, int group_size, int modulus_size, dsa_key *key);
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 398) void dsa_free(dsa_key *key);
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 399) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 400) int dsa_sign_hash_raw(const unsigned char *in,  unsigned long inlen,
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 401)                                    void *r,   void *s,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 402)                                prng_state *prng, int wprng, dsa_key *key);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 403) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 404) int dsa_sign_hash(const unsigned char *in,  unsigned long inlen,
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 405)                         unsigned char *out, unsigned long *outlen,
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 406)                         prng_state *prng, int wprng, dsa_key *key);
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 407) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 408) int dsa_verify_hash_raw(         void *r,          void *s,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 409)                     const unsigned char *hash, unsigned long hashlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 410)                                     int *stat,      dsa_key *key);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 411) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 412) int dsa_verify_hash(const unsigned char *sig,  unsigned long siglen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 413)                     const unsigned char *hash, unsigned long hashlen,
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 414)                           int           *stat, dsa_key       *key);
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 415) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 416) int dsa_encrypt_key(const unsigned char *in,   unsigned long inlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 417)                           unsigned char *out,  unsigned long *outlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 418)                           prng_state *prng, int wprng, int hash,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 419)                           dsa_key *key);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 420) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 421) int dsa_decrypt_key(const unsigned char *in,  unsigned long  inlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 422)                           unsigned char *out, unsigned long *outlen,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 423)                           dsa_key *key);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 424) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 425) int dsa_import(const unsigned char *in, unsigned long inlen, dsa_key *key);
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 426) int dsa_export(unsigned char *out, unsigned long *outlen, int type, dsa_key *key);
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 427) int dsa_verify_key(dsa_key *key, int *stat);
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 428) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 429) int dsa_shared_secret(void          *private_key, void *base,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 430)                       dsa_key       *public_key,
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 431)                       unsigned char *out,         unsigned long *outlen);
033cec5f mycrypt_pk.h              (Tom St Denis            2003-12-24 18:59:57 +0000 432) #endif
1c1822d5 mycrypt_pk.h              (Tom St Denis            2004-10-30 03:00:26 +0000 433) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 434) #ifdef LTC_DER
1c1822d5 mycrypt_pk.h              (Tom St Denis            2004-10-30 03:00:26 +0000 435) /* DER handling */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 436) 
6bba3a2a src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-08-24 15:00:32 +0200 437) typedef enum ltc_asn1_type_ {
c1e81ad4 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-09-30 13:26:18 +0200 438)  /*  0 */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 439)  LTC_ASN1_EOL,
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 440)  LTC_ASN1_BOOLEAN,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 441)  LTC_ASN1_INTEGER,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 442)  LTC_ASN1_SHORT_INTEGER,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 443)  LTC_ASN1_BIT_STRING,
c1e81ad4 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-09-30 13:26:18 +0200 444)  /*  5 */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 445)  LTC_ASN1_OCTET_STRING,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 446)  LTC_ASN1_NULL,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 447)  LTC_ASN1_OBJECT_IDENTIFIER,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 448)  LTC_ASN1_IA5_STRING,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 449)  LTC_ASN1_PRINTABLE_STRING,
c1e81ad4 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-09-30 13:26:18 +0200 450)  /* 10 */
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 451)  LTC_ASN1_UTF8_STRING,
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 452)  LTC_ASN1_UTCTIME,
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 453)  LTC_ASN1_CHOICE,
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 454)  LTC_ASN1_SEQUENCE,
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 455)  LTC_ASN1_SET,
c1e81ad4 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-09-30 13:26:18 +0200 456)  /* 15 */
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 457)  LTC_ASN1_SETOF,
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 458)  LTC_ASN1_RAW_BIT_STRING,
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 459)  LTC_ASN1_TELETEX_STRING,
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 460)  LTC_ASN1_CONSTRUCTED,
2d8933e4 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-10-06 18:32:59 +0200 461)  LTC_ASN1_CONTEXT_SPECIFIC,
6bba3a2a src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-08-24 15:00:32 +0200 462) } ltc_asn1_type;
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 463) 
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 464) /** A LTC ASN.1 list type */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 465) typedef struct ltc_asn1_list_ {
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 466)    /** The LTC ASN.1 enumerated type identifier */
6bba3a2a src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-08-24 15:00:32 +0200 467)    ltc_asn1_type type;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 468)    /** The data to encode or place for decoding */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 469)    void         *data;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 470)    /** The size of the input or resulting output */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 471)    unsigned long size;
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 472)    /** The used flag, this is used by the CHOICE ASN.1 type to indicate which choice was made */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 473)    int           used;
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 474)    /** prev/next entry in the list */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 475)    struct ltc_asn1_list_ *prev, *next, *child, *parent;
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 476) } ltc_asn1_list;
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 477) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 478) #define LTC_SET_ASN1(list, index, Type, Data, Size)  \
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 479)    do {                                              \
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 480)       int LTC_MACRO_temp            = (index);       \
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 481)       ltc_asn1_list *LTC_MACRO_list = (list);        \
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 482)       LTC_MACRO_list[LTC_MACRO_temp].type = (Type);  \
1eed98f6 src/headers/tomcrypt_pk.h (Tom St Denis            2006-06-18 01:37:50 +0000 483)       LTC_MACRO_list[LTC_MACRO_temp].data = (void*)(Data);  \
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 484)       LTC_MACRO_list[LTC_MACRO_temp].size = (Size);  \
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 485)       LTC_MACRO_list[LTC_MACRO_temp].used = 0;       \
ae5cc352 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-04-04 01:02:46 +0200 486)    } while (0)
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 487) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 488) /* SEQUENCE */
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 489) int der_encode_sequence_ex(ltc_asn1_list *list, unsigned long inlen,
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 490)                            unsigned char *out,  unsigned long *outlen, int type_of);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 491) 
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 492) #define der_encode_sequence(list, inlen, out, outlen) der_encode_sequence_ex(list, inlen, out, outlen, LTC_ASN1_SEQUENCE)
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 493) 
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 494) int der_decode_sequence_ex(const unsigned char *in, unsigned long  inlen,
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 495)                            ltc_asn1_list *list,     unsigned long  outlen, int ordered);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 496) 
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 497) #define der_decode_sequence(in, inlen, list, outlen) der_decode_sequence_ex(in, inlen, list, outlen, 1)
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 498) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 499) int der_length_sequence(ltc_asn1_list *list, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 500)                         unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 501) 
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 502) /* SUBJECT PUBLIC KEY INFO */
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 503) int der_encode_subject_public_key_info(unsigned char *out, unsigned long *outlen,
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 504)         unsigned int algorithm, void* public_key, unsigned long public_key_len,
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 505)         unsigned long parameters_type, void* parameters, unsigned long parameters_len);
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 506) 
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 507) int der_decode_subject_public_key_info(const unsigned char *in, unsigned long inlen,
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 508)         unsigned int algorithm, void* public_key, unsigned long* public_key_len,
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 509)         unsigned long parameters_type, ltc_asn1_list* parameters, unsigned long parameters_len);
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 510) 
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 511) /* SET */
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 512) #define der_decode_set(in, inlen, list, outlen) der_decode_sequence_ex(in, inlen, list, outlen, 0)
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 513) #define der_length_set der_length_sequence
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 514) int der_encode_set(ltc_asn1_list *list, unsigned long inlen,
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 515)                    unsigned char *out,  unsigned long *outlen);
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 516) 
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 517) int der_encode_setof(ltc_asn1_list *list, unsigned long inlen,
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 518)                      unsigned char *out,  unsigned long *outlen);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 519) 
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 520) /* VA list handy helpers with triplets of <type, size, data> */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 521) int der_encode_sequence_multi(unsigned char *out, unsigned long *outlen, ...);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 522) int der_decode_sequence_multi(const unsigned char *in, unsigned long inlen, ...);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 523) 
1eeff0bf src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-24 11:57:58 +0000 524) /* FLEXI DECODER handle unknown list decoder */
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 525) int  der_decode_sequence_flexi(const unsigned char *in, unsigned long *inlen, ltc_asn1_list **out);
ee4c00b7 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2014-08-31 18:26:14 +0200 526) #define der_free_sequence_flexi         der_sequence_free
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 527) void der_sequence_free(ltc_asn1_list *in);
4a1a5796 src/headers/tomcrypt_pk.h (Tom St Denis            2005-11-18 05:15:37 +0000 528) 
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 529) /* BOOLEAN */
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 530) int der_length_boolean(unsigned long *outlen);
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 531) int der_encode_boolean(int in,
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 532)                        unsigned char *out, unsigned long *outlen);
2945dea3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-05-29 23:12:56 +0000 533) int der_decode_boolean(const unsigned char *in, unsigned long inlen,
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 534)                                        int *out);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 535) /* INTEGER */
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 536) int der_encode_integer(void *num, unsigned char *out, unsigned long *outlen);
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 537) int der_decode_integer(const unsigned char *in, unsigned long inlen, void *num);
72412f6d src/headers/tomcrypt_pk.h (Tom St Denis            2005-08-01 16:36:47 +0000 538) int der_length_integer(void *num, unsigned long *len);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 539) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 540) /* INTEGER -- handy for 0..2^32-1 values */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 541) int der_decode_short_integer(const unsigned char *in, unsigned long inlen, unsigned long *num);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 542) int der_encode_short_integer(unsigned long num, unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 543) int der_length_short_integer(unsigned long num, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 544) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 545) /* BIT STRING */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 546) int der_encode_bit_string(const unsigned char *in, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 547)                                 unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 548) int der_decode_bit_string(const unsigned char *in, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 549)                                 unsigned char *out, unsigned long *outlen);
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 550) int der_encode_raw_bit_string(const unsigned char *in, unsigned long inlen,
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 551)                                 unsigned char *out, unsigned long *outlen);
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 552) int der_decode_raw_bit_string(const unsigned char *in, unsigned long inlen,
fa22e791 src/headers/tomcrypt_pk.h (Nikos Mavrogiannopoulos 2011-03-21 19:24:10 +0100 553)                                 unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 554) int der_length_bit_string(unsigned long nbits, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 555) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 556) /* OCTET STRING */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 557) int der_encode_octet_string(const unsigned char *in, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 558)                                   unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 559) int der_decode_octet_string(const unsigned char *in, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 560)                                   unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 561) int der_length_octet_string(unsigned long noctets, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 562) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 563) /* OBJECT IDENTIFIER */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 564) int der_encode_object_identifier(unsigned long *words, unsigned long  nwords,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 565)                                  unsigned char *out,   unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 566) int der_decode_object_identifier(const unsigned char *in,    unsigned long  inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 567)                                        unsigned long *words, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 568) int der_length_object_identifier(unsigned long *words, unsigned long nwords, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 569) unsigned long der_object_identifier_bits(unsigned long x);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 570) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 571) /* IA5 STRING */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 572) int der_encode_ia5_string(const unsigned char *in, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 573)                                 unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 574) int der_decode_ia5_string(const unsigned char *in, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 575)                                 unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 576) int der_length_ia5_string(const unsigned char *octets, unsigned long noctets, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 577) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 578) int der_ia5_char_encode(int c);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 579) int der_ia5_value_decode(int v);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 580) 
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 581) /* TELETEX STRING */
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 582) int der_decode_teletex_string(const unsigned char *in, unsigned long inlen,
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 583)                                 unsigned char *out, unsigned long *outlen);
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 584) int der_length_teletex_string(const unsigned char *octets, unsigned long noctets, unsigned long *outlen);
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 585) 
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 586) int der_teletex_char_encode(int c);
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 587) int der_teletex_value_decode(int v);
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 588) 
2cb8c441 src/headers/tomcrypt_pk.h (Christopher Brown       2013-01-24 11:14:05 -0800 589) /* PRINTABLE STRING */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 590) int der_encode_printable_string(const unsigned char *in, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 591)                                 unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 592) int der_decode_printable_string(const unsigned char *in, unsigned long inlen,
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 593)                                 unsigned char *out, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 594) int der_length_printable_string(const unsigned char *octets, unsigned long noctets, unsigned long *outlen);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 595) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 596) int der_printable_char_encode(int c);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 597) int der_printable_value_decode(int v);
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 598) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 599) /* UTF-8 */
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 600) #if (defined(SIZE_MAX) || __STDC_VERSION__ >= 199901L || defined(WCHAR_MAX) || defined(_WCHAR_T) || defined(_WCHAR_T_DEFINED) || defined (__WCHAR_TYPE__)) && !defined(LTC_NO_WCHAR)
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 601) #include <wchar.h>
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 602) #else
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 603) typedef ulong32 wchar_t;
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 604) #endif
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 605) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 606) int der_encode_utf8_string(const wchar_t *in,  unsigned long inlen,
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 607)                            unsigned char *out, unsigned long *outlen);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 608) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 609) int der_decode_utf8_string(const unsigned char *in,  unsigned long inlen,
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 610)                                        wchar_t *out, unsigned long *outlen);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 611) unsigned long der_utf8_charsize(const wchar_t c);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 612) int der_length_utf8_string(const wchar_t *in, unsigned long noctets, unsigned long *outlen);
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 613) 
e24b01d3 src/headers/tomcrypt_pk.h (Tom St Denis            2006-12-16 18:10:04 +0000 614) 
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 615) /* CHOICE */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 616) int der_decode_choice(const unsigned char *in,   unsigned long *inlen,
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 617)                             ltc_asn1_list *list, unsigned long  outlen);
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 618) 
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 619) /* UTCTime */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 620) typedef struct {
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 621)    unsigned YY, /* year */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 622)             MM, /* month */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 623)             DD, /* day */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 624)             hh, /* hour */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 625)             mm, /* minute */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 626)             ss, /* second */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 627)             off_dir, /* timezone offset direction 0 == +, 1 == - */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 628)             off_hh, /* timezone offset hours */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 629)             off_mm; /* timezone offset minutes */
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 630) } ltc_utctime;
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 631) 
bfcf1eb2 src/headers/tomcrypt_pk.h (Steffen Jaeckel         2012-07-26 14:43:15 +0200 632) int der_encode_utctime(ltc_utctime *utctime,
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 633)                        unsigned char *out,   unsigned long *outlen);
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 634) 
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 635) int der_decode_utctime(const unsigned char *in, unsigned long *inlen,
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 636)                              ltc_utctime   *out);
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 637) 
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 638) int der_length_utctime(ltc_utctime *utctime, unsigned long *outlen);
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 639) 
9264e34f src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-27 11:47:35 +0000 640) 
bfc2f5b0 src/headers/tomcrypt_pk.h (Tom St Denis            2004-12-30 23:55:53 +0000 641) #endif
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 642) 
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 643) /* $Source$ */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 644) /* $Revision$ */
3964a652 src/headers/tomcrypt_pk.h (Tom St Denis            2005-06-09 00:08:13 +0000 645) /* $Date$ */
