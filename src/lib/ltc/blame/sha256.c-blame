53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000   1) /* LibTomCrypt, modular cryptographic library -- Tom St Denis
53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000   2)  *
53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000   3)  * LibTomCrypt is a library that provides various cryptographic
53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000   4)  * algorithms in a highly modular and flexible manner.
53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000   5)  *
53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000   6)  * The library is free for all purposes without any express
40c5578a sha256.c                 (Tom St Denis 2004-05-12 20:42:16 +0000   7)  * guarantee it works.
53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000   8)  *
bbc52b9e src/hashes/sha2/sha256.c (Tom St Denis 2007-07-20 17:48:02 +0000   9)  * Tom St Denis, tomstdenis@gmail.com, http://libtom.org
53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000  10)  */
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  11) #include "tomcrypt.h"
53f7f3ba sha256.c                 (Tom St Denis 2004-01-25 17:40:34 +0000  12) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  13) /**
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  14)   @file sha256.c
bbc52b9e src/hashes/sha2/sha256.c (Tom St Denis 2007-07-20 17:48:02 +0000  15)   LTC_SHA256 by Tom St Denis 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  16) */
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  17) 
bbc52b9e src/hashes/sha2/sha256.c (Tom St Denis 2007-07-20 17:48:02 +0000  18) #ifdef LTC_SHA256 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  19) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  20) const struct ltc_hash_descriptor sha256_desc =
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  21) {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  22)     "sha256",
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  23)     0,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  24)     32,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  25)     64,
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000  26) 
3964a652 src/hashes/sha2/sha256.c (Tom St Denis 2005-06-09 00:08:13 +0000  27)     /* OID */
3964a652 src/hashes/sha2/sha256.c (Tom St Denis 2005-06-09 00:08:13 +0000  28)    { 2, 16, 840, 1, 101, 3, 4, 2, 1,  },
3964a652 src/hashes/sha2/sha256.c (Tom St Denis 2005-06-09 00:08:13 +0000  29)    9,
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000  30)     
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  31)     &sha256_init,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  32)     &sha256_process,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  33)     &sha256_done,
72412f6d src/hashes/sha2/sha256.c (Tom St Denis 2005-08-01 16:36:47 +0000  34)     &sha256_test,
72412f6d src/hashes/sha2/sha256.c (Tom St Denis 2005-08-01 16:36:47 +0000  35)     NULL
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  36) };
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  37) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  38) #ifdef LTC_SMALL_CODE
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  39) /* the K array */
479cc9c2 src/hashes/sha2/sha256.c (Tom St Denis 2006-08-30 23:30:00 +0000  40) static const ulong32 K[64] = {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  41)     0x428a2f98UL, 0x71374491UL, 0xb5c0fbcfUL, 0xe9b5dba5UL, 0x3956c25bUL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  42)     0x59f111f1UL, 0x923f82a4UL, 0xab1c5ed5UL, 0xd807aa98UL, 0x12835b01UL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  43)     0x243185beUL, 0x550c7dc3UL, 0x72be5d74UL, 0x80deb1feUL, 0x9bdc06a7UL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  44)     0xc19bf174UL, 0xe49b69c1UL, 0xefbe4786UL, 0x0fc19dc6UL, 0x240ca1ccUL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  45)     0x2de92c6fUL, 0x4a7484aaUL, 0x5cb0a9dcUL, 0x76f988daUL, 0x983e5152UL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  46)     0xa831c66dUL, 0xb00327c8UL, 0xbf597fc7UL, 0xc6e00bf3UL, 0xd5a79147UL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  47)     0x06ca6351UL, 0x14292967UL, 0x27b70a85UL, 0x2e1b2138UL, 0x4d2c6dfcUL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  48)     0x53380d13UL, 0x650a7354UL, 0x766a0abbUL, 0x81c2c92eUL, 0x92722c85UL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  49)     0xa2bfe8a1UL, 0xa81a664bUL, 0xc24b8b70UL, 0xc76c51a3UL, 0xd192e819UL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  50)     0xd6990624UL, 0xf40e3585UL, 0x106aa070UL, 0x19a4c116UL, 0x1e376c08UL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  51)     0x2748774cUL, 0x34b0bcb5UL, 0x391c0cb3UL, 0x4ed8aa4aUL, 0x5b9cca4fUL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  52)     0x682e6ff3UL, 0x748f82eeUL, 0x78a5636fUL, 0x84c87814UL, 0x8cc70208UL,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  53)     0x90befffaUL, 0xa4506cebUL, 0xbef9a3f7UL, 0xc67178f2UL
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  54) };
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000  55) #endif
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  56) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  57) /* Various logical functions */
f5331baa sha256.c                 (Tom St Denis 2003-06-11 21:10:22 +0000  58) #define Ch(x,y,z)       (z ^ (x & (y ^ z)))
7d21325d sha256.c                 (Tom St Denis 2003-03-13 02:12:16 +0000  59) #define Maj(x,y,z)      (((x | y) & z) | (x & y)) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  60) #define S(x, n)         RORc((x),(n))
d6071c62 sha256.c                 (Tom St Denis 2003-06-01 18:55:11 +0000  61) #define R(x, n)         (((x)&0xFFFFFFFFUL)>>(n))
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  62) #define Sigma0(x)       (S(x, 2) ^ S(x, 13) ^ S(x, 22))
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  63) #define Sigma1(x)       (S(x, 6) ^ S(x, 11) ^ S(x, 25))
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  64) #define Gamma0(x)       (S(x, 7) ^ S(x, 18) ^ R(x, 3))
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  65) #define Gamma1(x)       (S(x, 17) ^ S(x, 19) ^ R(x, 10))
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  66) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  67) /* compress 512-bits */
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  68) #ifdef LTC_CLEAN_STACK
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000  69) static int _sha256_compress(hash_state * md, unsigned char *buf)
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  70) #else
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000  71) static int  sha256_compress(hash_state * md, unsigned char *buf)
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  72) #endif
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  73) {
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000  74)     ulong32 S[8], W[64], t0, t1;
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  75) #ifdef LTC_SMALL_CODE
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000  76)     ulong32 t;
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000  77) #endif
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  78)     int i;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  79) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  80)     /* copy state into S */
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000  81)     for (i = 0; i < 8; i++) {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  82)         S[i] = md->sha256.state[i];
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000  83)     }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  84) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  85)     /* copy the state into 512-bits into W[0..15] */
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  86)     for (i = 0; i < 16; i++) {
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000  87)         LOAD32H(W[i], buf + (4*i));
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  88)     }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  89) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  90)     /* fill W[16..63] */
5581d44f sha256.c                 (Tom St Denis 2003-03-03 01:01:00 +0000  91)     for (i = 16; i < 64; i++) {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  92)         W[i] = Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) + W[i - 16];
5581d44f sha256.c                 (Tom St Denis 2003-03-03 01:01:00 +0000  93)     }        
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  94) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000  95)     /* Compress */
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000  96) #ifdef LTC_SMALL_CODE   
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000  97) #define RND(a,b,c,d,e,f,g,h,i)                         \
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000  98)      t0 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i];   \
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000  99)      t1 = Sigma0(a) + Maj(a, b, c);                    \
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000 100)      d += t0;                                          \
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 101)      h  = t0 + t1;
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 102) 
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000 103)      for (i = 0; i < 64; ++i) {
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000 104)          RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],i);
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000 105)          t = S[7]; S[7] = S[6]; S[6] = S[5]; S[5] = S[4]; 
3fe312cc sha256.c                 (Tom St Denis 2004-05-31 02:36:47 +0000 106)          S[4] = S[3]; S[3] = S[2]; S[2] = S[1]; S[1] = S[0]; S[0] = t;
1a114162 sha256.c                 (Tom St Denis 2004-06-20 02:41:49 +0000 107)      }  
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 108) #else 
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 109) #define RND(a,b,c,d,e,f,g,h,i,ki)                    \
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 110)      t0 = h + Sigma1(e) + Ch(e, f, g) + ki + W[i];   \
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 111)      t1 = Sigma0(a) + Maj(a, b, c);                  \
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 112)      d += t0;                                        \
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 113)      h  = t0 + t1;
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 114) 
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 115)     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],0,0x428a2f98);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 116)     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],1,0x71374491);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 117)     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],2,0xb5c0fbcf);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 118)     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],3,0xe9b5dba5);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 119)     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],4,0x3956c25b);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 120)     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],5,0x59f111f1);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 121)     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],6,0x923f82a4);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 122)     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],7,0xab1c5ed5);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 123)     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],8,0xd807aa98);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 124)     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],9,0x12835b01);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 125)     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],10,0x243185be);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 126)     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],11,0x550c7dc3);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 127)     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],12,0x72be5d74);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 128)     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],13,0x80deb1fe);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 129)     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],14,0x9bdc06a7);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 130)     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],15,0xc19bf174);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 131)     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],16,0xe49b69c1);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 132)     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],17,0xefbe4786);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 133)     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],18,0x0fc19dc6);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 134)     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],19,0x240ca1cc);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 135)     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],20,0x2de92c6f);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 136)     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],21,0x4a7484aa);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 137)     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],22,0x5cb0a9dc);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 138)     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],23,0x76f988da);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 139)     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],24,0x983e5152);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 140)     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],25,0xa831c66d);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 141)     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],26,0xb00327c8);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 142)     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],27,0xbf597fc7);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 143)     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],28,0xc6e00bf3);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 144)     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],29,0xd5a79147);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 145)     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],30,0x06ca6351);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 146)     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],31,0x14292967);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 147)     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],32,0x27b70a85);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 148)     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],33,0x2e1b2138);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 149)     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],34,0x4d2c6dfc);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 150)     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],35,0x53380d13);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 151)     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],36,0x650a7354);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 152)     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],37,0x766a0abb);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 153)     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],38,0x81c2c92e);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 154)     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],39,0x92722c85);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 155)     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],40,0xa2bfe8a1);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 156)     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],41,0xa81a664b);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 157)     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],42,0xc24b8b70);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 158)     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],43,0xc76c51a3);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 159)     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],44,0xd192e819);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 160)     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],45,0xd6990624);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 161)     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],46,0xf40e3585);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 162)     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],47,0x106aa070);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 163)     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],48,0x19a4c116);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 164)     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],49,0x1e376c08);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 165)     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],50,0x2748774c);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 166)     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],51,0x34b0bcb5);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 167)     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],52,0x391c0cb3);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 168)     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],53,0x4ed8aa4a);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 169)     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],54,0x5b9cca4f);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 170)     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],55,0x682e6ff3);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 171)     RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],56,0x748f82ee);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 172)     RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],57,0x78a5636f);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 173)     RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],58,0x84c87814);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 174)     RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],59,0x8cc70208);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 175)     RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],60,0x90befffa);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 176)     RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],61,0xa4506ceb);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 177)     RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],62,0xbef9a3f7);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 178)     RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],63,0xc67178f2);
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 179) 
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 180) #undef RND     
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 181)     
bd479d2b sha256.c                 (Tom St Denis 2003-07-11 02:09:41 +0000 182) #endif     
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 183) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 184)     /* feedback */
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 185)     for (i = 0; i < 8; i++) {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 186)         md->sha256.state[i] = md->sha256.state[i] + S[i];
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 187)     }
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000 188)     return CRYPT_OK;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 189) }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 190) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 191) #ifdef LTC_CLEAN_STACK
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000 192) static int sha256_compress(hash_state * md, unsigned char *buf)
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 193) {
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000 194)     int err;
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000 195)     err = _sha256_compress(md, buf);
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 196)     burn_stack(sizeof(ulong32) * 74);
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000 197)     return err;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 198) }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 199) #endif
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 200) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 201) /**
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 202)    Initialize the hash state
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 203)    @param md   The hash state you wish to initialize
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 204)    @return CRYPT_OK if successful
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 205) */
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000 206) int sha256_init(hash_state * md)
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 207) {
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 208)     LTC_ARGCHK(md != NULL);
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 209) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 210)     md->sha256.curlen = 0;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 211)     md->sha256.length = 0;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 212)     md->sha256.state[0] = 0x6A09E667UL;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 213)     md->sha256.state[1] = 0xBB67AE85UL;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 214)     md->sha256.state[2] = 0x3C6EF372UL;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 215)     md->sha256.state[3] = 0xA54FF53AUL;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 216)     md->sha256.state[4] = 0x510E527FUL;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 217)     md->sha256.state[5] = 0x9B05688CUL;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 218)     md->sha256.state[6] = 0x1F83D9ABUL;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 219)     md->sha256.state[7] = 0x5BE0CD19UL;
1c1822d5 sha256.c                 (Tom St Denis 2004-10-30 03:00:26 +0000 220)     return CRYPT_OK;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 221) }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 222) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 223) /**
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 224)    Process a block of memory though the hash
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 225)    @param md     The hash state
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 226)    @param in     The data to hash
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 227)    @param inlen  The length of the data (octets)
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 228)    @return CRYPT_OK if successful
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 229) */
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 230) HASH_PROCESS(sha256_process, sha256_compress, sha256, 64)
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 231) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 232) /**
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 233)    Terminate the hash to get the digest
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 234)    @param md  The hash state
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 235)    @param out [out] The destination of the hash (32 bytes)
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 236)    @return CRYPT_OK if successful
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 237) */
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 238) int sha256_done(hash_state * md, unsigned char *out)
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 239) {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 240)     int i;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 241) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 242)     LTC_ARGCHK(md  != NULL);
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 243)     LTC_ARGCHK(out != NULL);
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 244) 
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 245)     if (md->sha256.curlen >= sizeof(md->sha256.buf)) {
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 246)        return CRYPT_INVALID_ARG;
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 247)     }
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 248) 
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 249) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 250)     /* increase the length of the message */
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 251)     md->sha256.length += md->sha256.curlen * 8;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 252) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 253)     /* append the '1' bit */
b8b6e1ad sha256.c                 (Tom St Denis 2003-03-03 01:02:42 +0000 254)     md->sha256.buf[md->sha256.curlen++] = (unsigned char)0x80;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 255) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 256)     /* if the length is currently above 56 bytes we append zeros
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 257)      * then compress.  Then we can fall back to padding zeros and length
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 258)      * encoding like normal.
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 259)      */
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 260)     if (md->sha256.curlen > 56) {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 261)         while (md->sha256.curlen < 64) {
b8b6e1ad sha256.c                 (Tom St Denis 2003-03-03 01:02:42 +0000 262)             md->sha256.buf[md->sha256.curlen++] = (unsigned char)0;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 263)         }
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 264)         sha256_compress(md, md->sha256.buf);
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 265)         md->sha256.curlen = 0;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 266)     }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 267) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 268)     /* pad upto 56 bytes of zeroes */
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 269)     while (md->sha256.curlen < 56) {
b8b6e1ad sha256.c                 (Tom St Denis 2003-03-03 01:02:42 +0000 270)         md->sha256.buf[md->sha256.curlen++] = (unsigned char)0;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 271)     }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 272) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 273)     /* store length */
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 274)     STORE64H(md->sha256.length, md->sha256.buf+56);
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 275)     sha256_compress(md, md->sha256.buf);
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 276) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 277)     /* copy output */
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 278)     for (i = 0; i < 8; i++) {
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 279)         STORE32H(md->sha256.state[i], out+(4*i));
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 280)     }
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 281) #ifdef LTC_CLEAN_STACK
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 282)     zeromem(md, sizeof(hash_state));
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 283) #endif
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 284)     return CRYPT_OK;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 285) }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 286) 
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 287) /**
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 288)   Self-test the hash
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 289)   @return CRYPT_OK if successful, CRYPT_NOP if self-tests have been disabled
bfc2f5b0 src/hashes/sha2/sha256.c (Tom St Denis 2004-12-30 23:55:53 +0000 290) */  
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 291) int  sha256_test(void)
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 292) {
d6071c62 sha256.c                 (Tom St Denis 2003-06-01 18:55:11 +0000 293)  #ifndef LTC_TEST
d6071c62 sha256.c                 (Tom St Denis 2003-06-01 18:55:11 +0000 294)     return CRYPT_NOP;
d6071c62 sha256.c                 (Tom St Denis 2003-06-01 18:55:11 +0000 295)  #else    
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 296)   static const struct {
033cec5f sha256.c                 (Tom St Denis 2003-12-24 18:59:57 +0000 297)       char *msg;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 298)       unsigned char hash[32];
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 299)   } tests[] = {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 300)     { "abc",
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 301)       { 0xba, 0x78, 0x16, 0xbf, 0x8f, 0x01, 0xcf, 0xea,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 302)         0x41, 0x41, 0x40, 0xde, 0x5d, 0xae, 0x22, 0x23,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 303)         0xb0, 0x03, 0x61, 0xa3, 0x96, 0x17, 0x7a, 0x9c,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 304)         0xb4, 0x10, 0xff, 0x61, 0xf2, 0x00, 0x15, 0xad }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 305)     },
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 306)     { "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 307)       { 0x24, 0x8d, 0x6a, 0x61, 0xd2, 0x06, 0x38, 0xb8, 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 308)         0xe5, 0xc0, 0x26, 0x93, 0x0c, 0x3e, 0x60, 0x39,
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 309)         0xa3, 0x3c, 0xe4, 0x59, 0x64, 0xff, 0x21, 0x67, 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 310)         0xf6, 0xec, 0xed, 0xd4, 0x19, 0xdb, 0x06, 0xc1 }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 311)     },
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 312)   };
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 313) 
a14a7371 sha256.c                 (Tom St Denis 2003-03-03 01:00:16 +0000 314)   int i;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 315)   unsigned char tmp[32];
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 316)   hash_state md;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 317) 
a14a7371 sha256.c                 (Tom St Denis 2003-03-03 01:00:16 +0000 318)   for (i = 0; i < (int)(sizeof(tests) / sizeof(tests[0])); i++) {
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 319)       sha256_init(&md);
b8b6e1ad sha256.c                 (Tom St Denis 2003-03-03 01:02:42 +0000 320)       sha256_process(&md, (unsigned char*)tests[i].msg, (unsigned long)strlen(tests[i].msg));
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 321)       sha256_done(&md, tmp);
2de2976d src/hashes/sha2/sha256.c (Tom St Denis 2006-11-17 14:21:24 +0000 322)       if (XMEMCMP(tmp, tests[i].hash, 32) != 0) {
a14a7371 sha256.c                 (Tom St Denis 2003-03-03 01:00:16 +0000 323)          return CRYPT_FAIL_TESTVECTOR;
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 324)       }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 325)   }
a14a7371 sha256.c                 (Tom St Denis 2003-03-03 01:00:16 +0000 326)   return CRYPT_OK;
d6071c62 sha256.c                 (Tom St Denis 2003-06-01 18:55:11 +0000 327)  #endif
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 328) }
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 329) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 330) #endif
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 331) 
^a6a5fc6 sha256.c                 (Tom St Denis 2003-03-03 00:59:24 +0000 332) 
3964a652 src/hashes/sha2/sha256.c (Tom St Denis 2005-06-09 00:08:13 +0000 333) 
3964a652 src/hashes/sha2/sha256.c (Tom St Denis 2005-06-09 00:08:13 +0000 334) /* $Source$ */
3964a652 src/hashes/sha2/sha256.c (Tom St Denis 2005-06-09 00:08:13 +0000 335) /* $Revision$ */
3964a652 src/hashes/sha2/sha256.c (Tom St Denis 2005-06-09 00:08:13 +0000 336) /* $Date$ */
