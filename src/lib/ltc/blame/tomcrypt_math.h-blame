72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   1) /** math functions **/
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   2) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   3) #define LTC_MP_LT   -1
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   4) #define LTC_MP_EQ    0
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   5) #define LTC_MP_GT    1
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   6) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   7) #define LTC_MP_NO    0
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   8) #define LTC_MP_YES   1
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000   9) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  10) #ifndef LTC_MECC
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  11)    typedef void ecc_point;
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  12) #endif
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  13) 
bbc52b9e (Tom St Denis    2007-07-20 17:48:02 +0000  14) #ifndef LTC_MRSA
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  15)    typedef void rsa_key;
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  16) #endif
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  17) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  18) /** math descriptor */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  19) typedef struct {
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  20)    /** Name of the math provider */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  21)    char *name;
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  22) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  23)    /** Bits per digit, amount of bits must fit in an unsigned long */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  24)    int  bits_per_digit;
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  25) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  26) /* ---- init/deinit functions ---- */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  27) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  28)    /** initialize a bignum
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  29)      @param   a     The number to initialize
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  30)      @return  CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  31)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  32)    int (*init)(void **a);
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  33) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  34)    /** init copy
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  35)      @param  dst    The number to initialize and write to
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  36)      @param  src    The number to copy from
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  37)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  38)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  39)    int (*init_copy)(void **dst, void *src);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  40) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  41)    /** deinit
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  42)       @param   a    The number to free
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  43)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  44)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  45)    void (*deinit)(void *a);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  46) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  47) /* ---- data movement ---- */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  48) 
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  49)    /** negate
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  50)       @param   src   The number to negate
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  51)       @param   dst   The destination
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  52)       @return CRYPT_OK on success
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  53)    */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000  54)    int (*neg)(void *src, void *dst);
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  55) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  56)    /** copy
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  57)       @param   src   The number to copy from
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  58)       @param   dst   The number to write to
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  59)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  60)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  61)    int (*copy)(void *src, void *dst);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  62) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  63) /* ---- trivial low level functions ---- */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  64) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  65)    /** set small constant
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  66)       @param a    Number to write to
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  67)       @param n    Source upto bits_per_digit (actually meant for very small constants)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  68)       @return CRYPT_OK on succcess
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  69)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  70)    int (*set_int)(void *a, unsigned long n);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  71) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  72)    /** get small constant
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  73)       @param a    Number to read, only fetches upto bits_per_digit from the number
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  74)       @return  The lower bits_per_digit of the integer (unsigned)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  75)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  76)    unsigned long (*get_int)(void *a);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  77) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  78)    /** get digit n
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  79)      @param a  The number to read from
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  80)      @param n  The number of the digit to fetch
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  81)      @return  The bits_per_digit  sized n'th digit of a
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  82)    */
f597f29e (Steffen Jaeckel 2014-09-10 16:15:35 +0200  83)    ltc_mp_digit (*get_digit)(void *a, int n);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  84) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  85)    /** Get the number of digits that represent the number
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  86)      @param a   The number to count
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  87)      @return The number of digits used to represent the number
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  88)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  89)    int (*get_digit_count)(void *a);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  90) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  91)    /** compare two integers
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  92)      @param a   The left side integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  93)      @param b   The right side integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  94)      @return LTC_MP_LT if a < b, LTC_MP_GT if a > b and LTC_MP_EQ otherwise.  (signed comparison)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  95)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  96)    int (*compare)(void *a, void *b);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  97) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200  98)    /** compare against int
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000  99)      @param a   The left side integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 100)      @param b   The right side integer (upto bits_per_digit)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 101)      @return LTC_MP_LT if a < b, LTC_MP_GT if a > b and LTC_MP_EQ otherwise.  (signed comparison)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 102)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 103)    int (*compare_d)(void *a, unsigned long n);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 104) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 105)    /** Count the number of bits used to represent the integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 106)      @param a   The integer to count
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 107)      @return The number of bits required to represent the integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 108)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 109)    int (*count_bits)(void * a);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 110) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 111)    /** Count the number of LSB bits which are zero
2945dea3 (Tom St Denis    2006-05-29 23:12:56 +0000 112)      @param a   The integer to count
2945dea3 (Tom St Denis    2006-05-29 23:12:56 +0000 113)      @return The number of contiguous zero LSB bits
2945dea3 (Tom St Denis    2006-05-29 23:12:56 +0000 114)    */
2945dea3 (Tom St Denis    2006-05-29 23:12:56 +0000 115)    int (*count_lsb_bits)(void *a);
2945dea3 (Tom St Denis    2006-05-29 23:12:56 +0000 116) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 117)    /** Compute a power of two
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 118)      @param a  The integer to store the power in
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 119)      @param n  The power of two you want to store (a = 2^n)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 120)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 121)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 122)    int (*twoexpt)(void *a , int n);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 123) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 124) /* ---- radix conversions ---- */
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 125) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 126)    /** read ascii string
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 127)      @param a     The integer to store into
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 128)      @param str   The string to read
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 129)      @param radix The radix the integer has been represented in (2-64)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 130)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 131)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 132)    int (*read_radix)(void *a, const char *str, int radix);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 133) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 134)    /** write number to string
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 135)      @param a     The integer to store
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 136)      @param str   The destination for the string
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 137)      @param radix The radix the integer is to be represented in (2-64)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 138)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 139)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 140)    int (*write_radix)(void *a, char *str, int radix);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 141) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 142)    /** get size as unsigned char string
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 143)      @param a     The integer to get the size (when stored in array of octets)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 144)      @return The length of the integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 145)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 146)    unsigned long (*unsigned_size)(void *a);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 147) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 148)    /** store an integer as an array of octets
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 149)      @param src   The integer to store
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 150)      @param dst   The buffer to store the integer in
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 151)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 152)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 153)    int (*unsigned_write)(void *src, unsigned char *dst);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 154) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 155)    /** read an array of octets and store as integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 156)      @param dst   The integer to load
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 157)      @param src   The array of octets
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 158)      @param len   The number of octets
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 159)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 160)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 161)    int (*unsigned_read)(void *dst, unsigned char *src, unsigned long len);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 162) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 163) /* ---- basic math ---- */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 164) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 165)    /** add two integers
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 166)      @param a   The first source integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 167)      @param b   The second source integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 168)      @param c   The destination of "a + b"
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 169)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 170)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 171)    int (*add)(void *a, void *b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 172) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 173) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 174)    /** add two integers
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 175)      @param a   The first source integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 176)      @param b   The second source integer (single digit of upto bits_per_digit in length)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 177)      @param c   The destination of "a + b"
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 178)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 179)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 180)    int (*addi)(void *a, unsigned long b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 181) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 182)    /** subtract two integers
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 183)      @param a   The first source integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 184)      @param b   The second source integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 185)      @param c   The destination of "a - b"
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 186)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 187)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 188)    int (*sub)(void *a, void *b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 189) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 190)    /** subtract two integers
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 191)      @param a   The first source integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 192)      @param b   The second source integer (single digit of upto bits_per_digit in length)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 193)      @param c   The destination of "a - b"
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 194)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 195)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 196)    int (*subi)(void *a, unsigned long b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 197) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 198)    /** multiply two integers
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 199)      @param a   The first source integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 200)      @param b   The second source integer (single digit of upto bits_per_digit in length)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 201)      @param c   The destination of "a * b"
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 202)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 203)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 204)    int (*mul)(void *a, void *b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 205) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 206)    /** multiply two integers
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 207)      @param a   The first source integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 208)      @param b   The second source integer (single digit of upto bits_per_digit in length)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 209)      @param c   The destination of "a * b"
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 210)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 211)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 212)    int (*muli)(void *a, unsigned long b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 213) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 214)    /** Square an integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 215)      @param a    The integer to square
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 216)      @param b    The destination
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 217)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 218)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 219)    int (*sqr)(void *a, void *b);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 220) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 221)    /** Divide an integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 222)      @param a    The dividend
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 223)      @param b    The divisor
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 224)      @param c    The quotient (can be NULL to signify don't care)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 225)      @param d    The remainder (can be NULL to signify don't care)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 226)      @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 227)    */
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 228)    int (*mpdiv)(void *a, void *b, void *c, void *d);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 229) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 230)    /** divide by two
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 231)       @param  a   The integer to divide (shift right)
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 232)       @param  b   The destination
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 233)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 234)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 235)    int (*div_2)(void *a, void *b);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 236) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 237)    /** Get remainder (small value)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 238)       @param  a    The integer to reduce
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 239)       @param  b    The modulus (upto bits_per_digit in length)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 240)       @param  c    The destination for the residue
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 241)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 242)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 243)    int (*modi)(void *a, unsigned long b, unsigned long *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 244) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 245)    /** gcd
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 246)       @param  a     The first integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 247)       @param  b     The second integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 248)       @param  c     The destination for (a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 249)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 250)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 251)    int (*gcd)(void *a, void *b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 252) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 253)    /** lcm
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 254)       @param  a     The first integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 255)       @param  b     The second integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 256)       @param  c     The destination for [a, b]
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 257)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 258)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 259)    int (*lcm)(void *a, void *b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 260) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 261)    /** Modular multiplication
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 262)       @param  a     The first source
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 263)       @param  b     The second source
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 264)       @param  c     The modulus
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 265)       @param  d     The destination (a*b mod c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 266)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 267)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 268)    int (*mulmod)(void *a, void *b, void *c, void *d);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 269) 
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 270)    /** Modular squaring
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 271)       @param  a     The first source
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 272)       @param  b     The modulus
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 273)       @param  c     The destination (a*a mod b)
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 274)       @return CRYPT_OK on success
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 275)    */
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 276)    int (*sqrmod)(void *a, void *b, void *c);
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 277) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 278)    /** Modular inversion
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 279)       @param  a     The value to invert
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 280)       @param  b     The modulus
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 281)       @param  c     The destination (1/a mod b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 282)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 283)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 284)    int (*invmod)(void *, void *, void *);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 285) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 286) /* ---- reduction ---- */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 287) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 288)    /** setup montgomery
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 289)        @param a  The modulus
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 290)        @param b  The destination for the reduction digit
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 291)        @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 292)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 293)    int (*montgomery_setup)(void *a, void **b);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 294) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 295)    /** get normalization value
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 296)        @param a   The destination for the normalization value
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 297)        @param b   The modulus
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 298)        @return  CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 299)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 300)    int (*montgomery_normalization)(void *a, void *b);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 301) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 302)    /** reduce a number
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 303)        @param a   The number [and dest] to reduce
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 304)        @param b   The modulus
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 305)        @param c   The value "b" from montgomery_setup()
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 306)        @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 307)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 308)    int (*montgomery_reduce)(void *a, void *b, void *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 309) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 310)    /** clean up  (frees memory)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 311)        @param a   The value "b" from montgomery_setup()
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 312)        @return CRYPT_OK on success
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 313)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 314)    void (*montgomery_deinit)(void *a);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 315) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 316) /* ---- exponentiation ---- */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 317) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 318)    /** Modular exponentiation
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 319)        @param a    The base integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 320)        @param b    The power (can be negative) integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 321)        @param c    The modulus integer
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 322)        @param d    The destination
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 323)        @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 324)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 325)    int (*exptmod)(void *a, void *b, void *c, void *d);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 326) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 327)    /** Primality testing
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 328)        @param a     The integer to test
ca42862d (Steffen Jaeckel 2014-05-09 23:00:50 +0200 329)        @param b     The number of tests that shall be executed
ca42862d (Steffen Jaeckel 2014-05-09 23:00:50 +0200 330)        @param c     The destination of the result (FP_YES if prime)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 331)        @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 332)    */
ca42862d (Steffen Jaeckel 2014-05-09 23:00:50 +0200 333)    int (*isprime)(void *a, int b, int *c);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 334) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 335) /* ----  (optional) ecc point math ---- */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 336) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 337)    /** ECC GF(p) point multiplication (from the NIST curves)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 338)        @param k   The integer to multiply the point by
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 339)        @param G   The point to multiply
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 340)        @param R   The destination for kG
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 341)        @param modulus  The modulus for the field
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 342)        @param map Boolean indicated whether to map back to affine or not (can be ignored if you work in affine only)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 343)        @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 344)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 345)    int (*ecc_ptmul)(void *k, ecc_point *G, ecc_point *R, void *modulus, int map);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 346) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 347)    /** ECC GF(p) point addition
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 348)        @param P    The first point
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 349)        @param Q    The second point
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 350)        @param R    The destination of P + Q
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 351)        @param modulus  The modulus
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 352)        @param mp   The "b" value from montgomery_setup()
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 353)        @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 354)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 355)    int (*ecc_ptadd)(ecc_point *P, ecc_point *Q, ecc_point *R, void *modulus, void *mp);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 356) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 357)    /** ECC GF(p) point double
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 358)        @param P    The first point
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 359)        @param R    The destination of 2P
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 360)        @param modulus  The modulus
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 361)        @param mp   The "b" value from montgomery_setup()
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 362)        @return CRYPT_OK on success
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 363)    */
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 364)    int (*ecc_ptdbl)(ecc_point *P, ecc_point *R, void *modulus, void *mp);
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 365) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 366)    /** ECC mapping from projective to affine, currently uses (x,y,z) => (x/z^2, y/z^3, 1)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 367)        @param P     The point to map
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 368)        @param modulus The modulus
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 369)        @param mp    The "b" value from montgomery_setup()
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 370)        @return CRYPT_OK on success
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 371)        @remark  The mapping can be different but keep in mind a ecc_point only has three
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 372)                 integers (x,y,z) so if you use a different mapping you have to make it fit.
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 373)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 374)    int (*ecc_map)(ecc_point *P, void *modulus, void *mp);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 375) 
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 376)    /** Computes kA*A + kB*B = C using Shamir's Trick
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 377)        @param A        First point to multiply
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 378)        @param kA       What to multiple A by
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 379)        @param B        Second point to multiply
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 380)        @param kB       What to multiple B by
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 381)        @param C        [out] Destination point (can overlap with A or B
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 382)        @param modulus  Modulus for curve
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 383)        @return CRYPT_OK on success
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 384)    */
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 385)    int (*ecc_mul2add)(ecc_point *A, void *kA,
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 386)                       ecc_point *B, void *kB,
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 387)                       ecc_point *C,
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 388)                            void *modulus);
e24b01d3 (Tom St Denis    2006-12-16 18:10:04 +0000 389) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 390) /* ---- (optional) rsa optimized math (for internal CRT) ---- */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 391) 
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 392)    /** RSA Key Generation
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 393)        @param prng     An active PRNG state
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 394)        @param wprng    The index of the PRNG desired
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 395)        @param size     The size of the modulus (key size) desired (octets)
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 396)        @param e        The "e" value (public key).  e==65537 is a good choice
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 397)        @param key      [out] Destination of a newly created private key pair
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 398)        @return CRYPT_OK if successful, upon error all allocated ram is freed
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 399)     */
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 400)     int (*rsa_keygen)(prng_state *prng, int wprng, int size, long e, rsa_key *key);
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 401) 
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 402) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 403)    /** RSA exponentiation
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 404)       @param in       The octet array representing the base
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 405)       @param inlen    The length of the input
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 406)       @param out      The destination (to be stored in an octet array format)
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 407)       @param outlen   The length of the output buffer and the resulting size (zero padded to the size of the modulus)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 408)       @param which    PK_PUBLIC for public RSA and PK_PRIVATE for private RSA
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 409)       @param key      The RSA key to use
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 410)       @return CRYPT_OK on success
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 411)    */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 412)    int (*rsa_me)(const unsigned char *in,   unsigned long inlen,
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 413)                        unsigned char *out,  unsigned long *outlen, int which,
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 414)                        rsa_key *key);
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 415) 
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 416) /* ---- basic math continued ---- */
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 417) 
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 418)    /** Modular addition
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 419)       @param  a     The first source
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 420)       @param  b     The second source
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 421)       @param  c     The modulus
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 422)       @param  d     The destination (a + b mod c)
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 423)       @return CRYPT_OK on success
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 424)    */
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 425)    int (*addmod)(void *a, void *b, void *c, void *d);
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 426) 
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 427)    /** Modular substraction
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 428)       @param  a     The first source
bfcf1eb2 (Steffen Jaeckel 2012-07-26 14:43:15 +0200 429)       @param  b     The second source
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 430)       @param  c     The modulus
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 431)       @param  d     The destination (a - b mod c)
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 432)       @return CRYPT_OK on success
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 433)    */
edf11c62 (Steffen Jaeckel 2011-01-18 21:16:11 +0100 434)    int (*submod)(void *a, void *b, void *c, void *d);
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 435) 
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 436) /* ---- misc stuff ---- */
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 437)    /** Make a pseudo-random mpi
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 438)       @param  a     The mpi to make random
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 439)       @param  size  The desired length
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 440)       @return CRYPT_OK on success
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 441)    */
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 442)    int (*rand)(void *a, int size);
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 443) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 444) } ltc_math_descriptor;
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 445) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 446) extern ltc_math_descriptor ltc_mp;
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 447) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 448) int ltc_init_multi(void **a, ...);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 449) void ltc_deinit_multi(void *a, ...);
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 450) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 451) #ifdef LTM_DESC
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 452) extern const ltc_math_descriptor ltm_desc;
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 453) #endif
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 454) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 455) #ifdef TFM_DESC
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 456) extern const ltc_math_descriptor tfm_desc;
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 457) #endif
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 458) 
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 459) #ifdef GMP_DESC
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 460) extern const ltc_math_descriptor gmp_desc;
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 461) #endif
64d7ebe1 (Tom St Denis    2006-04-06 19:48:32 +0000 462) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 463) #if !defined(DESC_DEF_ONLY) && defined(LTC_SOURCE)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 464) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 465) #define MP_DIGIT_BIT                 ltc_mp.bits_per_digit
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 466) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 467) /* some handy macros */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 468) #define mp_init(a)                   ltc_mp.init(a)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 469) #define mp_init_multi                ltc_init_multi
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 470) #define mp_clear(a)                  ltc_mp.deinit(a)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 471) #define mp_clear_multi               ltc_deinit_multi
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 472) #define mp_init_copy(a, b)           ltc_mp.init_copy(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 473) 
4a1a5796 (Tom St Denis    2005-11-18 05:15:37 +0000 474) #define mp_neg(a, b)                 ltc_mp.neg(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 475) #define mp_copy(a, b)                ltc_mp.copy(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 476) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 477) #define mp_set(a, b)                 ltc_mp.set_int(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 478) #define mp_set_int(a, b)             ltc_mp.set_int(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 479) #define mp_get_int(a)                ltc_mp.get_int(a)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 480) #define mp_get_digit(a, n)           ltc_mp.get_digit(a, n)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 481) #define mp_get_digit_count(a)        ltc_mp.get_digit_count(a)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 482) #define mp_cmp(a, b)                 ltc_mp.compare(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 483) #define mp_cmp_d(a, b)               ltc_mp.compare_d(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 484) #define mp_count_bits(a)             ltc_mp.count_bits(a)
2945dea3 (Tom St Denis    2006-05-29 23:12:56 +0000 485) #define mp_cnt_lsb(a)                ltc_mp.count_lsb_bits(a)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 486) #define mp_2expt(a, b)               ltc_mp.twoexpt(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 487) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 488) #define mp_read_radix(a, b, c)       ltc_mp.read_radix(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 489) #define mp_toradix(a, b, c)          ltc_mp.write_radix(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 490) #define mp_unsigned_bin_size(a)      ltc_mp.unsigned_size(a)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 491) #define mp_to_unsigned_bin(a, b)     ltc_mp.unsigned_write(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 492) #define mp_read_unsigned_bin(a, b, c) ltc_mp.unsigned_read(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 493) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 494) #define mp_add(a, b, c)              ltc_mp.add(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 495) #define mp_add_d(a, b, c)            ltc_mp.addi(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 496) #define mp_sub(a, b, c)              ltc_mp.sub(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 497) #define mp_sub_d(a, b, c)            ltc_mp.subi(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 498) #define mp_mul(a, b, c)              ltc_mp.mul(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 499) #define mp_mul_d(a, b, c)            ltc_mp.muli(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 500) #define mp_sqr(a, b)                 ltc_mp.sqr(a, b)
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 501) #define mp_div(a, b, c, d)           ltc_mp.mpdiv(a, b, c, d)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 502) #define mp_div_2(a, b)               ltc_mp.div_2(a, b)
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 503) #define mp_mod(a, b, c)              ltc_mp.mpdiv(a, b, NULL, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 504) #define mp_mod_d(a, b, c)            ltc_mp.modi(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 505) #define mp_gcd(a, b, c)              ltc_mp.gcd(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 506) #define mp_lcm(a, b, c)              ltc_mp.lcm(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 507) 
6fecec10 (Steffen Jaeckel 2011-01-18 20:06:03 +0100 508) #define mp_addmod(a, b, c, d)        ltc_mp.addmod(a, b, c, d)
6fecec10 (Steffen Jaeckel 2011-01-18 20:06:03 +0100 509) #define mp_submod(a, b, c, d)        ltc_mp.submod(a, b, c, d)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 510) #define mp_mulmod(a, b, c, d)        ltc_mp.mulmod(a, b, c, d)
1eed98f6 (Tom St Denis    2006-06-18 01:37:50 +0000 511) #define mp_sqrmod(a, b, c)           ltc_mp.sqrmod(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 512) #define mp_invmod(a, b, c)           ltc_mp.invmod(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 513) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 514) #define mp_montgomery_setup(a, b)    ltc_mp.montgomery_setup(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 515) #define mp_montgomery_normalization(a, b) ltc_mp.montgomery_normalization(a, b)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 516) #define mp_montgomery_reduce(a, b, c)   ltc_mp.montgomery_reduce(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 517) #define mp_montgomery_free(a)        ltc_mp.montgomery_deinit(a)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 518) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 519) #define mp_exptmod(a,b,c,d)          ltc_mp.exptmod(a,b,c,d)
ca42862d (Steffen Jaeckel 2014-05-09 23:00:50 +0200 520) #define mp_prime_is_prime(a, b, c)   ltc_mp.isprime(a, b, c)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 521) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 522) #define mp_iszero(a)                 (mp_cmp_d(a, 0) == LTC_MP_EQ ? LTC_MP_YES : LTC_MP_NO)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 523) #define mp_isodd(a)                  (mp_get_digit_count(a) > 0 ? (mp_get_digit(a, 0) & 1 ? LTC_MP_YES : LTC_MP_NO) : LTC_MP_NO)
97256dae (Steffen Jaeckel 2014-07-15 20:26:40 +0200 524) #define mp_exch(a, b)                do { void *ABC__tmp = a; a = b; b = ABC__tmp; } while(0)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 525) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 526) #define mp_tohex(a, b)               mp_toradix(a, b, 16)
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 527) 
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 528) #define mp_rand(a, b)                ltc_mp.rand(a, b)
8dc8a2d5 (Steffen Jaeckel 2011-03-21 22:50:49 +0100 529) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 530) #endif
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 531) 
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 532) /* $Source$ */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 533) /* $Revision$ */
72412f6d (Tom St Denis    2005-08-01 16:36:47 +0000 534) /* $Date$ */
